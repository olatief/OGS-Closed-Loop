C51 COMPILER V9.03   TIMER                                                                 06/20/2011 19:43:21 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN timer.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE timer.c LARGE BROWSE MODC2 MDU_R515 INCDIR(..\hal\nrf24l01p;..\hal;..\compi
                    -ler\c51;..\hal\nrf24le1;..\compiler\common) DEFINE(MCU_NRF24LE1) DEBUG OBJECTEXTEND

line level    source

   1          #include "hardware.h"
   2          #include "timer.h"
   3          #include "led.h"
   4          
   5          #define PERIOD_MS 100
   6          #define TIMER_TWO_PS 8   // Pre-scaler fot rimer 2 to get lower stimulation frequencies
   7          
   8          
   9          static xdata uint16_t timer_high = 0;
  10          static xdata uint16_t timer_low = 0;
  11          static xdata uint8_t bHighState = 0;
  12          static xdata uint16_t IEI = 400;
  13          static xdata uint8_t nStage = 5;
  14          
  15          static data uint16_t tick = 0;
  16          static data uint8_t nStageCount = 0;
  17          static uint8_t timer2scaler = TIMER_TWO_PS;
  18          static uint8_t pulsesOn = 10;
  19          static uint8_t pulsesOnCount = 10;
  20          static uint8_t pulsesOff = 10;
  21          static uint8_t pulsesOffCount = 10;
  22          static uint8_t cycles = 3;
  23          static uint8_t cyclesCount = 3;
  24          
  25          static uint8_t outputDisabled = 0;
  26          uint8_t isStimulating = 0;
  27          
  28          void SeizureDetected();
  29          void startStim();
  30          void stopStim();
  31          
  32          void progSD(progAlgo* pAlgo)
  33          {
  34   1              IEI = pAlgo->IEI;
  35   1              nStage = pAlgo->nStage;
  36   1      }
  37          
  38          void peakDetect() // called when threshold reached
  39          {
  40   1               if(tick > 0)  // last detection was less than IEI (ms) ago
  41   1               {
  42   2                      --nStageCount;
  43   2                      if(nStageCount == 0) // seizure detected
  44   2                      {
  45   3                              SeizureDetected();      
  46   3                      }               
  47   2               } else {  // reset nStage
  48   2                      nStageCount = nStage;
  49   2               }
  50   1      
  51   1               tick = IEI;  // reset tick
  52   1      
  53   1      }
  54          
C51 COMPILER V9.03   TIMER                                                                 06/20/2011 19:43:21 PAGE 2   

  55          uint8_t DetectionLock = 0;
  56          
  57          void SeizureDetected()
  58          {       
  59   1              nStageCount = nStage;
  60   1              // DO STUFF
  61   1              startStim();
  62   1      }
  63          
  64          void startStim()
  65          {
  66   1              isStimulating = 0x80;
  67   1              outputDisabled = 0;
  68   1              pulsesOffCount = pulsesOff;
  69   1              pulsesOnCount = pulsesOn;
  70   1              cyclesCount = cycles;
  71   1              T2I0 = 1; // Turn on timer 2
  72   1          ET2 = 1; // Enable timer 2 interrupt
  73   1      
  74   1      }
  75          
  76          void stopStim()
  77          {
  78   1              isStimulating = 0;
  79   1              T2I0 = 0; // Turn off timer 2
  80   1          ET2 = 0; // Disable timer 2 interrupt
  81   1      }
  82          
  83          void progTimer(progStim *pStim)
  84          {
  85   1              xdata uint32_t period = 0;
  86   1              xdata uint32_t period_us = (uint32_t)1e6/((uint32_t)pStim->Freq);
  87   1              period = (uint32_t)period_us*(uint32_t)2/3; // its (2/3)/8
  88   1              timer_high = pStim->DC*period/100;
  89   1              timer_low = (period - timer_high);
  90   1              timer_high = 2^16-timer_high/TIMER_TWO_PS;      
  91   1              timer_low = 2^16-timer_low/TIMER_TWO_PS;
  92   1      
  93   1              startStim();
  94   1      }
  95          
  96          void initTimer()
  97          {
  98   1       //     progTimer(30, 10);
  99   1      /* Configure Timer 2 */
 100   1           
 101   1         CRCL = 0xF0;
 102   1         CRCH = 0xF0;
 103   1          
 104   1         CCEN = 0x02;  // Compare enabled
 105   1            /*T2CON: */
 106   1         T2PS = 1; // CLK/24 , no reload
 107   1         T2R1 = 1;
 108   1        // T2CM = 1;  
 109   1         T2I0 = 1; // Turn on timer
 110   1          ET2 = 1; // Enable timer 2 interrupt
 111   1      
 112   1      /** Timer 0 Setup **/
 113   1      
 114   1              TMOD = 0x01; // 16 bit timer for TMR0;
 115   1              TH0 = 0x7F;
 116   1              TL0 = 0xFF;
C51 COMPILER V9.03   TIMER                                                                 06/20/2011 19:43:21 PAGE 3   

 117   1              TR0 = 1; //     Tmr0 run control (start)
 118   1              ET0 = 1; // Enable timer0 interrupt
 119   1              return;
 120   1      }
 121          
 122          void timer0() interrupt INTERRUPT_T0 // Seizure detection IEI counter (tick)
 123          {
 124   1              TH0 = 0x7F;
 125   1              TL0 = 0xFF;
 126   1      
 127   1              if(tick != 0)
 128   1              {
 129   2                      --tick;
 130   2              }
 131   1      
 132   1      //      P1_6 ^= 1; 
 133   1      }
 134          
 135          void timer2() interrupt INTERRUPT_T2 // controls stimulation waveform
 136          {
 137   1              --timer2scaler;
 138   1              if( 0 == timer2scaler )
 139   1              {
 140   2                      if(bHighState)
 141   2                      {
 142   3                              CRCL = timer_low&0xFF;
 143   3                              CRCH = timer_low>>8;
 144   3                      //      prog_led(g_Amplitude);
 145   3                              
 146   3                              if(!outputDisabled) P1_6 = 1;
 147   3                                              
 148   3                      } 
 149   2                      else 
 150   2                      {
 151   3                              CRCL = timer_high&0xFF;
 152   3                              CRCH = timer_high>>8;
 153   3                      //      prog_led(0);
 154   3                              P1_6 = 0;
 155   3      
 156   3                              if(!outputDisabled)
 157   3                              {
 158   4                                      --pulsesOnCount;
 159   4                                      if(0 == pulsesOnCount)
 160   4                                      {
 161   5                                              pulsesOnCount = pulsesOn;
 162   5                                              if(0 == pulsesOff)
 163   5                                              {
 164   6                                                      ET2 = 0;
 165   6                                              }
 166   5                                              outputDisabled = 1;
 167   5                                      }
 168   4                              } else {
 169   4                                      --pulsesOffCount;
 170   4                                      if(0 == pulsesOffCount)
 171   4                                      {
 172   5                                              pulsesOffCount = pulsesOff;
 173   5                                              outputDisabled = 0;
 174   5      
 175   5                                              if(cycles != 0)  // run infinte amount of times if cycles is 0
 176   5                                              {
 177   6                                                      --cyclesCount;
 178   6                                                      if(0 == cyclesCount)
C51 COMPILER V9.03   TIMER                                                                 06/20/2011 19:43:21 PAGE 4   

 179   6                                                      {
 180   7                                                              cyclesCount = cycles;
 181   7                                                              ET2 = 0;
 182   7                                                      }
 183   6                                              }
 184   5                                      }
 185   4                              }
 186   3                      }
 187   2                       
 188   2                      timer2scaler = TIMER_TWO_PS; // scales timer by a factor of 8
 189   2                      bHighState^=1;
 190   2              }
 191   1              
 192   1              TF2 = 0;                        
 193   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    616    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     18      11
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

================ Revision history ============================================
2.0.1:
 - Changed enum OPAMP_PosSel_TypeDef. Enum value opaPosSelOpaIn changed from
   DAC_OPA0MUX_POSSEL_OPA1IN to DAC_OPA0MUX_POSSEL_OPA0INP.
 - Bugfix in efm32_lesense.h, LESENSE_ChClk_TypeDef now contains unshifted
   values, fixed the implementation in efm32_lesense.c where the bug prevented
   the sampleClk to be set to AUXHFRCO.

2.0.0:
 - USART_Init-functions now calls USART_Reset() which will also disable/reset
   interrupt
 - USART_BaudrateSyncSet() now asserts on invalid oversample configuration
 - Added initialization of parity bit in LEUART_Init() 
 - Added Tiny Gecko support for CMU, ULFRCO, LESENSE clocks and continuous 
   calibration
 - Added Tiny Gecko support for GPIO, EM4 pin retention and wake up support
 - Added Tiny Gecko support for I2S, SPI auto TX mode on USART
 - Added Tiny Gecko support for CACHE mesasurements for MSC module
 - Added Tiny Gecko support for LCD module (with no HIGH segment registers)
 - Added Tiny Gecko support for TIMER, PWM 2x,  (DT lock not supported)
 - Added Tiny Gecko support for LESENSE module
 - Added Tiny Gecko support for PRS input in PCNT
 - Added Tiny Gecko support for async signals in PRS, PRS_SourceAsyncSignalSet()
 - Initial support for some Giant Gecko features, where overlapping with Tiny
 - Removed LPFEN / LPFREQ support from DAC
 - Fixed comments around interrupt functions, making it clear it is bitwise
   logical or interrupt flags
 - Fixed PCNT initialization for external clock configurations, making sure
   config is synchronized at startup to 3 clocks. Note fix only works for
   >revC EFM32G devices.
 - Fixed efm32_cmu.c, EFM_ASSERT statement for LEUART clock div logic was
   inverted
 - Fixed ADC_InitScan, PRSSEL shift value corrected
 - Fixed CMU_ClockFreqGet for devices that do not have I2C 
 - Fixed I2C_TransferInit for devices with more than one I2C-bus (Giant Gecko)
 - Changed ACMP_Disable() implementation, now only disables the ACMP instance
   by clearing the EN bit in the CTRL register
 - Removed ACMP_DisableNoReset() function
 - Fixed ACMP_Init(), removed automatic enabling, added new structure member 
   "enaReq" for ACMP_Init_TypeDef to control, fixed the EFM_ASSERT of the
   biasprog parameter
 - Added default configuration macro ACMP_INIT_DEFAULT for ACMP_Init_TypeDef
 - Fixed ACMP_CapsenseInit(), removed automatic enabling, added new structure member 
   "enaReq" for ACMP_CapsenseInit_TypeDef to control, fixed the EFM_ASSERT of 
   the biasprog parameter
 - Changed the name of the default configuration macro for
   ACMP_CapsenseInit_TypeDef to ACMP_CAPSENSE_INIT_DEFAULT
 - Added RTC_Reset and RTC_CounterReset functions for RTC

1.3.0:
 - MSC is automatically enabled/disabled when using the MSC API. This saves
   power, and reduces errors due to not calling MSC_Init().
 - Added API for controlling Cortex-M3 MPU (memory protection unit)
 - Adjusted bit fields to comply with latest CMSIS release, see EFM_CMSIS
   changes file for details
 - Fixed issue with bit mask clearing in ACMP
 - Functions ACMP_Enable and ACMP_DisableNoReset added
 - Added comment about rev.C chips in PCNT, CMD_LTOPBIM not neccessary any more
 - Added missing instance validity asserts to peripherals (ACMP, LEUART, USART)
 - Fixed UART0 check in CMU_ClockFreqGet()
 - Fixed command sync for PCNT before setting TOPB value during init
 - Fixed instance validity check macro in PCNT
 - Fixed TIMER_Reset() removed write to unimplemented timer channel registers
 - Fixed EFM_ASSERT statements in ACMP, VCNP  
 - General code style update: added missing curly braces, default cases, etc.

1.2.1:
 - Feature complete efm32lib, now also includes peripheral API for modules
   AES,PCNT,MSC,ACMP,VCMP,LCD,EBI 
 - Fixed _TIMER_CC_CTRL_ICEDGE flags for correct timer configuration
 - Fixed ADC calibration of Single and Scan mode of operation
 - Added PCNT (ChipRev A/B PCNT0 errata NOT supported) and AES support
 - Fixed conditional inclusion in efm32_emu.h
 - Fixed code for LEUART0 for devices with multiple LEUARTs.
 - Fixed incorrect setting of DOUT for GPIO configuration

1.1.4
 - Fix for TIMER_INIT_DEFAULT
 
1.1.3:
 - Added ADC, DAC, LETIMER, PRS, TIMER (except DTI) support
 - Added utility for fetching chip revision (efm32_system.c/h)
 - Removed RTC instance ref in API, only one RTC will be supported
   (Affects also define in efm32_cmu.h)
 - Added default init struct macros for LEUART, USART
 - Added msbf parameter in USART synchronous init struct, USART_InitSync_TypeDef.
 - Updated reset for I2C, USART, LEUART to also reset IEN register.
 - Corrected fault in GPIO_PortOutSet()

1.1.2:
 - Corrected minor issues in EMU, EM3 mode when restoring clocks
 - Corrected RMU reset cause checking
 - Changed GPIO enumerator symbols to start with gpio (from GPIO_)
 - Changed CMU and WDOG enum typedefs to start with CMU_/WDOG_ (from cmu/wdog)
 - Added USART/UART, LEUART, DMA, I2C support

1.1.1:
 - First version including support for CMU, DBG, EMU, GPIO, RTC, WDOG

C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE HAL_USB
OBJECT MODULE PLACED IN .\hal_usb.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\hal\nrf24lu1p\hal_usb.c LARGE BROWSE INCDIR(.;..\compiler\c51;..\hal\nrf
                    -24lu1p;..\hal\nrf24l01p;..\hal;..\compiler\common) DEFINE(MCU_NRF24LU1P) DEBUG OBJECTEXTEND CODE LISTINCLUDE SYMBOLS PRI
                    -NT(.\hal_usb.lst) PREPRINT(.\hal_usb.i) OBJECT(.\hal_usb.obj)

line level    source

   1          /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2           *
   3           * The information contained herein is confidential property of Nordic 
   4           * Semiconductor ASA.Terms and conditions of usage are described in detail 
   5           * in NORDIC SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6           *
   7           * Licensees are granted free, non-transferable use of the information. NO
   8           * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9           * the file.
  10           *              
  11           * $LastChangedRevision: 270 $
  12           */
  13          
  14          /** @file
  15          * @brief Implementaion of the USB HAL
  16           */
  17          #include "nrf24lu1p.h"
   1      =1  #ifndef NRF24LU1P_H
   2      =1  #define NRF24LU1P_H
   3      =1  
   4      =1  #ifdef __ICC8051__
           =1 #include <ionRF24LU1p.h>
           =1 #include <bit24lu1.h>
           =1 #endif /*__ICC8051__*/
   8      =1  
   9      =1  #ifdef __C51__
  10      =1  #include <Nordic\reg24lu1.h>
   1      =2  /*--------------------------------------------------------------------------
   2      =2   * reg24lu1.h
   3      =2   *
   4      =2   * Keil C51 header file for the Nordic Semiconductor nRF24LU1 2.4GHz RF
   5      =2   * transceiver with embedded 8051 compatible microcontroller and USB.
   6      =2   *
   7      =2   *
   8      =2   *------------------------------------------------------------------------*/
   9      =2  #ifndef __REG24LU1_H__
  10      =2  #define __REG24LU1_H__
  11      =2  
  12      =2  //-----------------------------------------------------------------------------
  13      =2  // Byte Registers
  14      =2  //-----------------------------------------------------------------------------
  15      =2  
  16      =2  sfr   P0           = 0x80;
  17      =2  sfr   SP           = 0x81;
  18      =2  sfr   DPL          = 0x82;
  19      =2  sfr   DPH          = 0x83;
  20      =2  sfr   DPL1         = 0x84;
  21      =2  sfr   DPH1         = 0x85;
  22      =2  sfr   PCON         = 0x87;
  23      =2  sfr   TCON         = 0x88;
  24      =2  sfr   TMOD         = 0x89;
  25      =2  sfr   TL0          = 0x8A;
  26      =2  sfr   TL1          = 0x8B;
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 2   

  27      =2  sfr   TH0          = 0x8C;
  28      =2  sfr   TH1          = 0x8D;
  29      =2  sfr   CKCON        = 0x8E;
  30      =2  sfr   RFCON        = 0x90;
  31      =2  sfr   DPS          = 0x92;
  32      =2  sfr   P0DIR        = 0x94;
  33      =2  sfr   P0ALT        = 0x95;
  34      =2  sfr   S0CON        = 0x98;
  35      =2  sfr   S0BUF        = 0x99;
  36      =2  sfr   IEN2         = 0x9A;
  37      =2  sfr   USBCON       = 0xA0;
  38      =2  sfr   CLKCTL       = 0xA3;
  39      =2  sfr   PWRDWN       = 0xA4;
  40      =2  sfr   WUCONF       = 0xA5;
  41      =2  sfr   INTEXP       = 0xA6;
  42      =2  sfr   IEN0         = 0xA8;
  43      =2  sfr   IP0          = 0xA9;
  44      =2  sfr   S0RELL       = 0xAA;
  45      =2  sfr   REGXH        = 0xAB;
  46      =2  sfr   REGXL        = 0xAC;
  47      =2  sfr   REGXC        = 0xAD;
  48      =2  sfr   RSTRES       = 0xB1;
  49      =2  sfr   SMDAT        = 0xB2;
  50      =2  sfr   SMCTL        = 0xB3;
  51      =2  sfr   TICKDV       = 0xB5;
  52      =2  sfr   IEN1         = 0xB8;
  53      =2  sfr   IP1          = 0xB9;
  54      =2  sfr   S0RELH       = 0xBA;
  55      =2  sfr   SSCONF       = 0xBC;
  56      =2  sfr   SSDATA       = 0xBD;
  57      =2  sfr   SSSTAT       = 0xBE;
  58      =2  sfr   IRCON        = 0xC0;
  59      =2  sfr   CCEN         = 0xC1;
  60      =2  sfr   CCL1         = 0xC2;
  61      =2  sfr   CCH1         = 0xC3;
  62      =2  sfr   CCL2         = 0xC4;
  63      =2  sfr   CCH2         = 0xC5;
  64      =2  sfr   CCL3         = 0xC6;
  65      =2  sfr   CCH3         = 0xC7;
  66      =2  sfr   T2CON        = 0xC8;
  67      =2  sfr   P0EXP        = 0xC9;
  68      =2  sfr   CRCL         = 0xCA;
  69      =2  sfr   CRCH         = 0xCB;
  70      =2  sfr   TL2          = 0xCC;
  71      =2  sfr   TH2          = 0xCD;
  72      =2  sfr   PSW          = 0xD0;
  73      =2  sfr   WDCON        = 0xD8;
  74      =2  sfr   USBSLP       = 0xD9;
  75      =2  sfr   ACC          = 0xE0;
  76      =2  sfr   RFDAT        = 0xE5;
  77      =2  sfr   RFCTL        = 0xE6;
  78      =2  sfr   AESCS        = 0xE8;
  79      =2  sfr   MD0          = 0xE9;
  80      =2  sfr   MD1          = 0xEA;
  81      =2  sfr   MD2          = 0xEB;
  82      =2  sfr   MD3          = 0xEC;
  83      =2  sfr   MD4          = 0xED;
  84      =2  sfr   MD5          = 0xEE;
  85      =2  sfr   ARCON        = 0xEF;
  86      =2  sfr   B            = 0xF0;
  87      =2  sfr   AESKIN       = 0xF1;
  88      =2  sfr   AESIV        = 0xF2;
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 3   

  89      =2  sfr   AESD         = 0xF3;
  90      =2  sfr   AESIA1       = 0xF5;
  91      =2  sfr   AESIA2       = 0xF6;
  92      =2  sfr   FSR          = 0xF8;
  93      =2  sfr   FPCR         = 0xF9;
  94      =2  sfr   FCR          = 0xFA;
  95      =2  
  96      =2  //-----------------------------------------------------------------------------
  97      =2  // Word Registers
  98      =2  //-----------------------------------------------------------------------------
  99      =2  
 100      =2  sfr16 CC1          = 0xC2;
 101      =2  sfr16 CC2          = 0xC4;
 102      =2  sfr16 CC3          = 0xC6;
 103      =2  sfr16 CRC          = 0xCA;
 104      =2  sfr16 T2           = 0xCC;
 105      =2  
 106      =2  //-----------------------------------------------------------------------------
 107      =2  /* Lint uses a trick (see co-kc51.lnt) where sbit gets treated like (expanded to) a bool.
 108      =2     This causes errors due to the strong type checking of _Bool (and thereby bool) that
 109      =2     is turned on in our implementation of stdbool.h.
 110      =2     Therefore, we suppress Lint warning 18 ("Redeclaration") for the sbit-s declared in this file.
 111      =2  */
 112      =2  
 113      =2  /*lint -e18 */
 114      =2  //-----------------------------------------------------------------------------
 115      =2  
 116      =2  //-----------------------------------------------------------------------------
 117      =2  // Bit Definitions
 118      =2  //-----------------------------------------------------------------------------
 119      =2  
 120      =2  /*  FSR  */
 121      =2  sbit  MCDIS        = FSR^7;
 122      =2  sbit  STP          = FSR^6;
 123      =2  sbit  WEN          = FSR^5;
 124      =2  sbit  RDYN         = FSR^4;
 125      =2  sbit  INFEN        = FSR^3;
 126      =2  sbit  RDIS         = FSR^2;
 127      =2  sbit  RDEND        = FSR^1;
 128      =2  sbit  WPEN         = FSR^0;
 129      =2  
 130      =2  /*  PSW   */
 131      =2  sbit  CY           = PSW^7;
 132      =2  sbit  AC           = PSW^6;
 133      =2  sbit  F0           = PSW^5;
 134      =2  sbit  RS1          = PSW^4;
 135      =2  sbit  RS0          = PSW^3;
 136      =2  sbit  OV           = PSW^2;
 137      =2  sbit  F1           = PSW^1;
 138      =2  sbit  P            = PSW^0;
 139      =2  
 140      =2  /*  TCON  */
 141      =2  sbit  TF1          = TCON^7;
 142      =2  sbit  TR1          = TCON^6;
 143      =2  sbit  TF0          = TCON^5;
 144      =2  sbit  TR0          = TCON^4;
 145      =2  sbit  IE1          = TCON^3;
 146      =2  sbit  IT1          = TCON^2;
 147      =2  sbit  IE0          = TCON^1;
 148      =2  sbit  IT0          = TCON^0;
 149      =2  
 150      =2  /*  S0CON  */
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 4   

 151      =2  sbit  SM0          = S0CON^7;
 152      =2  sbit  SM1          = S0CON^6;
 153      =2  sbit  SM20         = S0CON^5;
 154      =2  sbit  REN0         = S0CON^4;
 155      =2  sbit  TB80         = S0CON^3;
 156      =2  sbit  RB80         = S0CON^2;
 157      =2  sbit  TI0          = S0CON^1;
 158      =2  sbit  RI0          = S0CON^0;
 159      =2  
 160      =2  /*  T2CON  */
 161      =2  sbit  T2PS         = T2CON^7;
 162      =2  sbit  I3FR         = T2CON^6;
 163      =2  sbit  I2FR         = T2CON^5;
 164      =2  sbit  T2R1         = T2CON^4;
 165      =2  sbit  T2R0         = T2CON^3;
 166      =2  sbit  T2CM         = T2CON^2;
 167      =2  sbit  T2I1         = T2CON^1;
 168      =2  sbit  T2I0         = T2CON^0;
 169      =2  
 170      =2  /*  IEN0  */
 171      =2  sbit  EA           = IEN0^7;
 172      =2  
 173      =2  sbit  ET2          = IEN0^5;
 174      =2  sbit  ES0          = IEN0^4;
 175      =2  sbit  ET1          = IEN0^3;
 176      =2  sbit  EX1          = IEN0^2;
 177      =2  sbit  ET0          = IEN0^1;
 178      =2  sbit  EX0          = IEN0^0;
 179      =2  
 180      =2  /* IEN1  */
 181      =2  sbit  EXEN2        = IEN1^7;
 182      =2  
 183      =2  sbit  WUIRQ        = IEN1^5;
 184      =2  sbit  USB          = IEN1^4;
 185      =2  sbit  USBWU        = IEN1^3;
 186      =2  sbit  SPI          = IEN1^2;
 187      =2  sbit  RF           = IEN1^1;
 188      =2  sbit  RFSPI        = IEN1^0;
 189      =2  
 190      =2  /* IRCON */
 191      =2  sbit  EXF2         = IRCON^7;
 192      =2  sbit  TF2          = IRCON^6;
 193      =2  sbit  WUF          = IRCON^5;
 194      =2  sbit  USBF         = IRCON^4;
 195      =2  sbit  USBWUF       = IRCON^3;
 196      =2  sbit  SPIF         = IRCON^2;
 197      =2  sbit  RFF          = IRCON^1;
 198      =2  sbit  RFSPIF       = IRCON^0;
 199      =2  
 200      =2  /* USBCON */
 201      =2  sbit  SWRST        = USBCON^7;
 202      =2  sbit  WU           = USBCON^6;
 203      =2  sbit  SUSPEND      = USBCON^5;
 204      =2  sbit  IV4          = USBCON^4;
 205      =2  sbit  IV3          = USBCON^3;
 206      =2  sbit  IV2          = USBCON^2;
 207      =2  sbit  IV1          = USBCON^1;
 208      =2  sbit  IV0          = USBCON^0;
 209      =2  
 210      =2  /* PORT0 */
 211      =2  sbit  P00          = P0^0;
 212      =2  sbit  P01          = P0^1;
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 5   

 213      =2  sbit  P02          = P0^2;
 214      =2  sbit  P03          = P0^3;
 215      =2  sbit  MCSN         = P0^3;
 216      =2  sbit  SCSN         = P0^3;
 217      =2  sbit  P04          = P0^4;
 218      =2  sbit  P05          = P0^5;
 219      =2  
 220      =2  /* RFCON */
 221      =2  sbit  RFCE         = RFCON^0;
 222      =2  sbit  RFCSN        = RFCON^1;
 223      =2  sbit  RFCKEN       = RFCON^2;
 224      =2  
 225      =2  /* WDCON */
 226      =2  sbit  BD           = WDCON^7;
 227      =2  
 228      =2  /* AESCS */
 229      =2  sbit  GO           = AESCS^0;
 230      =2  sbit  DECR         = AESCS^1;
 231      =2  
 232      =2  /*lint +e18 */  /* Re-enable Lint warning 18 */
 233      =2  
 234      =2  
 235      =2  /* REGX commands */
 236      =2  #define RWD         0x00
 237      =2  #define WWD         0x08
 238      =2  #define RGTIMER     0x01
 239      =2  #define WGTIMER     0x09
 240      =2  #define RRTCLAT     0x02
 241      =2  #define WRTCLAT     0x0A
 242      =2  #define RRTC        0x03
 243      =2  #define WRTCDIS     0x0B
 244      =2  #define RWSTA0      0x04
 245      =2  #define WWCON0      0x0C
 246      =2  #define RWSTA1      0x05
 247      =2  #define WWCON1      0x0D
 248      =2  
 249      =2  //-----------------------------------------------------------------------------
 250      =2  // Interrupt Vector Definitions
 251      =2  //-----------------------------------------------------------------------------
 252      =2  
 253      =2  #define INTERRUPT_EXT_INT0     0   // External Interrupt0 (P0.3)
 254      =2  #define INTERRUPT_T0           1   // Timer0 Overflow
 255      =2  #define INTERRUPT_AES_RDY      2   // AES ready interrupt
 256      =2  #define INTERRUPT_T1           3   // Timer1 Overflow
 257      =2  #define INTERRUPT_UART0        4   // UART0, Receive & Transmitt interrupt
 258      =2  #define INTERRUPT_T2           5   // Timer2 Overflow
 259      =2  #define INTERRUPT_RF_RDY       8   // RF SPI ready interrupt
 260      =2  #define INTERRUPT_RFIRQ        9   // RF interrupt
 261      =2  #define INTERRUPT_SPI          10  // SPI interrupt
 262      =2  #define INTERRUPT_USB_WU       11  // USB wakeup interrupt
 263      =2  #define INTERRUPT_USB_INT      12  // USB interrupt
 264      =2  #define INTERRUPT_WU           13  // Internal wakeup interrupt
 265      =2  
 266      =2  //-----------------------------------------------------------------------------
 267      =2  // Header File Preprocessor Directive
 268      =2  //-----------------------------------------------------------------------------
 269      =2  
 270      =2  #endif
  11      =1  #endif /*__C51__*/
  12      =1  
  13      =1  #include "isrdef24lu1p.h"
   1      =2  #ifdef __ICC8051__
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 6   

           =2 
           =2 #define EXT_INT0_ISR() \
           =2 _Pragma("vector=0x0003") \
           =2 __interrupt void ext_int0_isr(void)
           =2 
           =2 #define T0_ISR() \
           =2 _Pragma("vector=0x000b") \
           =2 __interrupt void t0_isr(void)
           =2 
           =2 #define AES_RDY_ISR() \
           =2 _Pragma("vector=0x0013") \
           =2 __interrupt void aes_rdy_isr(void)
           =2 
           =2 #define T1_ISR() \
           =2 _Pragma("vector=0x001b") \
           =2 __interrupt void t1_isr(void)
           =2 
           =2 #define UART0_ISR() \
           =2 _Pragma("vector=0x0023") \
           =2 __interrupt void uart0_isr(void)
           =2 
           =2 #define T2_ISR() \
           =2 _Pragma("vector=0x002b") \
           =2 __interrupt void t2_isr(void)
           =2 
           =2 #define RF_RDY_ISR() \
           =2 _Pragma("vector=0x0043") \
           =2 __interrupt void rf_rdy_isr(void)
           =2 
           =2 #define NRF_ISR() \
           =2 _Pragma("vector=0x004b") \
           =2 __interrupt void nrf_isr(void)
           =2 
           =2 #define SPI_ISR() \
           =2 _Pragma("vector=0x0053") \
           =2 __interrupt void spi_isr(void)
           =2 
           =2 #define USB_WU_ISR() \
           =2 _Pragma("vector=0x005b") \
           =2 __interrupt void usb_wu_isr(void)
           =2 
           =2 #define USB_ISR() \
           =2 _Pragma("vector=0x0063") \
           =2 __interrupt void usb_isr(void)
           =2 
           =2 #define WU_ISR() \
           =2 _Pragma("vector=0x006b") \
           =2 __interrupt void wu_isr(void)
           =2 
           =2 #endif /*__ICC8051__*/
  52      =2  
  53      =2  #ifdef __C51__
  54      =2  
  55      =2  #define EXT_INT0_ISR()  void ext_int0_isr(void) interrupt INTERRUPT_EXT_INT0// External Interrupt0 (P0.3) 
             -(0x03)
  56      =2  #define T0_ISR()        void t0_isr(void)       interrupt INTERRUPT_T0      // Timer0 Overflow (0x0b)
  57      =2  #define AES_RDY_ISR()   void aes_rdy_isr(void)  interrupt INTERRUPT_AES_RDY // AES ready interrupt (0x13)
  58      =2  #define T1_ISR()        void t1_isr(void)       interrupt INTERRUPT_T1      // Timer1 Overflow (0x1b)
  59      =2  #define UART0_ISR()     void uart0_isr(void)    interrupt INTERRUPT_UART0   // UART0, Receive & Transmitt 
             -interrupt (0x0023)
  60      =2  #define T2_ISR()        void t2_isr(void)       interrupt INTERRUPT_T2      // Timer2 Overflow (0x2b)
  61      =2  #define RF_RDY_ISR()    void rf_rdy_isr(void)   interrupt INTERRUPT_RF_RDY  // RF SPI ready interrupt (0x4
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 7   

             -3)
  62      =2  #define NRF_ISR()       void nrf_isr(void)      interrupt INTERRUPT_RFIRQ   // RF interrupt (0x4b)
  63      =2  #define SPI_ISR()       void spi_isr(void)      interrupt INTERRUPT_SPI     // SPI interrupt (0x53)
  64      =2  #define USB_WU_ISR()    void usb_wu_isr(void)   interrupt INTERRUPT_USB_WU  // USB wakeup interrupt (0x5b)
  65      =2  #define USB_ISR()       void usb_isr(void)      interrupt INTERRUPT_USB_INT // USB interrupt (0x63)
  66      =2  #define WU_ISR()        void wu_isr(void)       interrupt INTERRUPT_WU      // Internal wakeup interrupt (
             -0x6b)
  67      =2  
  68      =2  #endif /*__C51__*/
  69      =2  
  70      =2  
  71      =2  
  72      =2  
  14      =1  #include "memdefs.h"
   1      =2  #ifndef MEMDEFS_H_
   2      =2  #define MEMDEFS_H_
   3      =2  
   4      =2  #ifdef __C51__
   5      =2  #define __no_init 
   6      =2  #endif /*__C51__*/
   7      =2  
   8      =2  #ifdef __ICC8051__
           =2 
           =2 #define idata __idata
           =2 #define xdata __xdata
           =2 #define code __code
           =2 #define data __data
           =2 #define pdata __pdata
           =2 #define _at_ @
           =2 #define _nop_() __no_operation()
           =2 #define bit __bit
           =2 __sfr __no_init volatile unsigned int CRC @ 0xCA;
           =2 __sfr __no_init volatile unsigned int T2  @ 0xCC;
           =2 
           =2 #define reentrant 
           =2 #if __DATA_MODEL__ == __DATA_MODEL_LARGE__
           =2   #warning "if not using large data model: reentrant procedures must be declared using IAR syntax"
           =2 #endif /*__DATA_MODEL__ == __DATA_MODEL_LARGE__*/
           =2 
           =2 #define CLKCTRL CLKFCTL
           =2 
           =2 #ifndef NULL
           =2 #define NULL _NULL
           =2 #endif /*NULL*/
           =2 
           =2 #endif /*__ICC8051__*/
  33      =2  
  34      =2  #endif /*MEMDEFS_H_*/
  15      =1  
  16      =1  #endif
  18          #include <stdint.h>
   1      =1  /* Copyright (c) 2007 Nordic Semiconductor. All Rights Reserved.
   2      =1   *
   3      =1   * The information contained herein is property of Nordic Semiconductor ASA.
   4      =1   * Terms and conditions of usage are described in detail in NORDIC
   5      =1   * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6      =1   *
   7      =1   * Licensees are granted free, non-transferable use of the information. NO
   8      =1   * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9      =1   * the file.
  10      =1   *
  11      =1   * $LastChangedRevision: 186 $
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 8   

  12      =1   */
  13      =1  
  14      =1  /** @file
  15      =1   * Type definitions for firmware projects developed at Nordic Semiconductor.
  16      =1   *
  17      =1   * Standard storage classes in C, such as @c char, @c int, and @c long, are not always
  18      =1   * interpreted in the same way by the compiler. The types here are defined by their
  19      =1   * bit length and signed/unsigned property, as their names indicate. The correlation
  20      =1   * between the name and properties of the storage class should be true, regardless of
  21      =1   * the compiler being used.
  22      =1   */
  23      =1  
  24      =1  #ifndef __STDINT_H__
  25      =1  #define __STDINT_H__
  26      =1  
  27      =1  #ifdef __C51__
  28      =1  
  29      =1  typedef unsigned char uint8_t;        ///< 8 bit unsigned int
  30      =1  
  31      =1  typedef signed char int8_t;          ///< 8 bit signed int
  32      =1  
  33      =1  typedef unsigned int uint16_t;        ///< 16 bit unsigned int
  34      =1  
  35      =1  typedef signed int int16_t;          ///< 16 bit signed int
  36      =1  
  37      =1  typedef unsigned long uint32_t;       ///< 32 bit unsigned int
  38      =1  
  39      =1  typedef signed long int32_t;         ///< 32 bit signed int
  40      =1  
  41      =1  #endif // __C51__
  42      =1  
  43      =1  #ifndef NULL
  44      =1  #define NULL (void*)0
  45      =1  #endif
  46      =1  
  47      =1  #endif // __STDINT_H__
  19          #ifdef __ICC8051__
              #include <intrinsics.h>
              #endif
  22          #ifdef __C51__
  23          #include <intrins.h>
   1      =1  /*--------------------------------------------------------------------------
   2      =1  INTRINS.H
   3      =1  
   4      =1  Intrinsic functions for C51.
   5      =1  Copyright (c) 1988-2010 Keil Elektronik GmbH and ARM Germany GmbH
   6      =1  All rights reserved.
   7      =1  --------------------------------------------------------------------------*/
   8      =1  
   9      =1  #ifndef __INTRINS_H__
  10      =1  #define __INTRINS_H__
  11      =1  
  12      =1  extern void          _nop_     (void);
  13      =1  extern bit           _testbit_ (bit);
  14      =1  extern unsigned char _cror_    (unsigned char, unsigned char);
  15      =1  extern unsigned int  _iror_    (unsigned int,  unsigned char);
  16      =1  extern unsigned long _lror_    (unsigned long, unsigned char);
  17      =1  extern unsigned char _crol_    (unsigned char, unsigned char);
  18      =1  extern unsigned int  _irol_    (unsigned int,  unsigned char);
  19      =1  extern unsigned long _lrol_    (unsigned long, unsigned char);
  20      =1  extern unsigned char _chkfloat_(float);
  21      =1  #if !defined (__CX2__)
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 9   

  22      =1  extern void          _push_    (unsigned char _sfr);
  23      =1  extern void          _pop_     (unsigned char _sfr);
  24      =1  #endif
  25      =1  
  26      =1  #endif
  27      =1  
  24          #endif
  25          
  26          #include "nordic_common.h"
   1      =1  /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2      =1   *
   3      =1   * The information contained herein is confidential property of Nordic 
   4      =1   * Semiconductor ASA.Terms and conditions of usage are described in detail 
   5      =1   * in NORDIC SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6      =1   *
   7      =1   * Licensees are granted free, non-transferable use of the information. NO
   8      =1   * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9      =1   * the file.
  10      =1   *              
  11      =1   * $LastChangedRevision: 133 $
  12      =1   */
  13      =1  
  14      =1  /** @file
  15      =1   * @brief Common defines and macros for firmware developed by Nordic Semiconductor.
  16      =1   *
  17      =1   */
  18      =1  
  19      =1  #ifndef NORDIC_COMMON_H__
  20      =1  #define NORDIC_COMMON_H__
  21      =1  
  22      =1  /** Swaps the upper byte with the lower byte in a 16 bit variable */
  23      =1  //lint -emacro((572),SWAP) // Suppress warning 572 "Excessive shift value"
  24      =1  #define SWAP(x) ((((x)&0xFF)<<8)|(((x)>>8)&0xFF))
  25      =1  
  26      =1  /** The upper 8 bits of a 16 bit value */
  27      =1  #define MSB(a) ((a & 0xFF00) >> 8)
  28      =1  /** The lower 8 bits (of a 16 bit value) */
  29      =1  #define LSB(a) ((a & 0xFF))
  30      =1  
  31      =1  /** Leaves the minimum of the two arguments */
  32      =1  #define MIN(a, b) ((a) < (b) ? (a) : (b))
  33      =1  /** Leaves the maximum of the two arguments */
  34      =1  #define MAX(a, b) ((a) < (b) ? (b) : (a))
  35      =1  
  36      =1  #define BIT_0 0x01 /**< The value of bit 0 */
  37      =1  #define BIT_1 0x02 /**< The value of bit 1 */
  38      =1  #define BIT_2 0x04 /**< The value of bit 2 */
  39      =1  #define BIT_3 0x08 /**< The value of bit 3 */
  40      =1  #define BIT_4 0x10 /**< The value of bit 4 */
  41      =1  #define BIT_5 0x20 /**< The value of bit 5 */
  42      =1  #define BIT_6 0x40 /**< The value of bit 6 */
  43      =1  #define BIT_7 0x80 /**< The value of bit 7 */
  44      =1  #define BIT_8 0x0100 /**< The value of bit 8 */
  45      =1  #define BIT_9 0x0200 /**< The value of bit 9 */
  46      =1  #define BIT_10 0x0400 /**< The value of bit 10 */
  47      =1  #define BIT_11 0x0800 /**< The value of bit 11 */
  48      =1  #define BIT_12 0x1000 /**< The value of bit 12 */
  49      =1  #define BIT_13 0x2000 /**< The value of bit 13 */
  50      =1  #define BIT_14 0x4000 /**< The value of bit 14 */
  51      =1  #define BIT_15 0x8000 /**< The value of bit 15 */
  52      =1  
  53      =1  
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 10  

  54      =1  #endif // NORDIC_COMMON_H__
  27          #include "hal_usb_desc.h"
   1      =1  /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2      =1   *
   3      =1   * The information contained herein is confidential property of Nordic 
   4      =1   * Semiconductor ASA.Terms and conditions of usage are described in detail 
   5      =1   * in NORDIC SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6      =1   *
   7      =1   * Licensees are granted free, non-transferable use of the information. NO
   8      =1   * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9      =1   * the file.
  10      =1   *              
  11      =1   * $LastChangedRevision: 133 $
  12      =1   */
  13      =1  
  14      =1  /** @file
  15      =1  * @brief This file contain structures and constants defined in Chapter 9 of the USB 2.0 standard
  16      =1   */
  17      =1  
  18      =1  #ifndef HAL_USB_DESC_H__
  19      =1  #define HAL_USB_DESC_H__
  20      =1  
  21      =1  #include <stdint.h>
   1      =2  /* Copyright (c) 2007 Nordic Semiconductor. All Rights Reserved.
   2      =2   *
   3      =2   * The information contained herein is property of Nordic Semiconductor ASA.
   4      =2   * Terms and conditions of usage are described in detail in NORDIC
   5      =2   * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6      =2   *
   7      =2   * Licensees are granted free, non-transferable use of the information. NO
   8      =2   * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9      =2   * the file.
  10      =2   *
  11      =2   * $LastChangedRevision: 186 $
  12      =2   */
  13      =2  
  14      =2  /** @file
  15      =2   * Type definitions for firmware projects developed at Nordic Semiconductor.
  16      =2   *
  17      =2   * Standard storage classes in C, such as @c char, @c int, and @c long, are not always
  18      =2   * interpreted in the same way by the compiler. The types here are defined by their
  19      =2   * bit length and signed/unsigned property, as their names indicate. The correlation
  20      =2   * between the name and properties of the storage class should be true, regardless of
  21      =2   * the compiler being used.
  22      =2   */
  23      =2  
  24      =2  #ifndef __STDINT_H__
           =2 #define __STDINT_H__
           =2 
           =2 #ifdef __C51__
           =2 
           =2 typedef unsigned char uint8_t;        ///< 8 bit unsigned int
           =2 
           =2 typedef signed char int8_t;          ///< 8 bit signed int
           =2 
           =2 typedef unsigned int uint16_t;        ///< 16 bit unsigned int
           =2 
           =2 typedef signed int int16_t;          ///< 16 bit signed int
           =2 
           =2 typedef unsigned long uint32_t;       ///< 32 bit unsigned int
           =2 
           =2 typedef signed long int32_t;         ///< 32 bit signed int
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 11  

           =2 
           =2 #endif // __C51__
           =2 
           =2 #ifndef NULL
           =2 #define NULL (void*)0
           =2 #endif
           =2 
           =2 #endif // __STDINT_H__
  22      =1  
  23      =1  // Standard request codes
  24      =1  #define USB_REQ_GET_STATUS         0x00
  25      =1  #define USB_REQ_CLEAR_FEATURE      0x01
  26      =1  #define USB_REQ_RESERVED_1         0x02
  27      =1  #define USB_REQ_SET_FEATURE        0x03
  28      =1  #define USB_REQ_RESERVED_2         0x04
  29      =1  #define USB_REQ_SET_ADDRESS        0x05
  30      =1  #define USB_REQ_GET_DESCRIPTOR     0x06
  31      =1  #define USB_REQ_SET_DESCRIPTOR     0x07
  32      =1  #define USB_REQ_GET_CONFIGURATION  0x08
  33      =1  #define USB_REQ_SET_CONFIGURATION  0x09
  34      =1  #define USB_REQ_GET_INTERFACE      0x0a
  35      =1  #define USB_REQ_SET_INTERFACE      0x0b
  36      =1  #define USB_REQ_SYNCH_FRAME        0x0c
  37      =1  
  38      =1  // Descriptor types
  39      =1  #define USB_DESC_DEVICE           0x01
  40      =1  #define USB_DESC_CONFIGURATION    0x02
  41      =1  #define USB_DESC_STRING           0x03
  42      =1  #define USB_DESC_INTERFACE        0x04
  43      =1  #define USB_DESC_ENDPOINT         0x05
  44      =1  #define USB_DESC_DEVICE_QUAL      0x06
  45      =1  #define USB_DESC_OTHER_SPEED_CONF 0x07
  46      =1  #define USB_DESC_INTERFACE_POWER  0x08
  47      =1  #define USB_DESC_OTG              0x09
  48      =1  #define USB_DESC_DEBUG            0x0A
  49      =1  #define USB_DESC_INTERFACE_ASSOC  0x0B
  50      =1  
  51      =1  #define USB_ENDPOINT_TYPE_CONTROL           0x00
  52      =1  #define USB_ENDPOINT_TYPE_ISOCHRONOUS       0x01
  53      =1  #define USB_ENDPOINT_TYPE_BULK              0x02
  54      =1  #define USB_ENDPOINT_TYPE_INTERRUPT         0x03
  55      =1  
  56      =1  // USB device classes
  57      =1  #define USB_DEVICE_CLASS_RESERVED               0x00
  58      =1  #define USB_DEVICE_CLASS_AUDIO                  0x01
  59      =1  #define USB_DEVICE_CLASS_COMMUNICATIONS         0x02
  60      =1  #define USB_DEVICE_CLASS_HUMAN_INTERFACE        0x03
  61      =1  #define USB_DEVICE_CLASS_MONITOR                0x04
  62      =1  #define USB_DEVICE_CLASS_PHYSICAL_INTERFACE     0x05
  63      =1  #define USB_DEVICE_CLASS_POWER                  0x06
  64      =1  #define USB_DEVICE_CLASS_PRINTER                0x07
  65      =1  #define USB_DEVICE_CLASS_STORAGE                0x08
  66      =1  #define USB_DEVICE_CLASS_HUB                    0x09
  67      =1  #define USB_DEVICE_CLASS_APPLICATION_SPECIFIC   0xFE
  68      =1  #define USB_DEVICE_CLASS_VENDOR_SPECIFIC        0xFF
  69      =1  
  70      =1  
  71      =1  #define USB_CLASS_DESCRIPTOR_HID    0x21
  72      =1  #define USB_CLASS_DESCRIPTOR_REPORT 0x22
  73      =1  #define USB_CLASS_DESCRIPTOR_PHYSICAL_DESCRIPTOR 0x23
  74      =1  
  75      =1  #define USB_DEVICE_REMOTE_WAKEUP    0x01
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 12  

  76      =1  #define USB_ENDPOINT_HALT           0x00
  77      =1  #define USB_TEST_MODE               0x02
  78      =1  
  79      =1  typedef struct {
  80      =1       volatile uint8_t bLength;
  81      =1       volatile uint8_t bDescriptorType;
  82      =1       volatile uint16_t bcdUSB;
  83      =1       volatile uint8_t bDeviceClass;
  84      =1       volatile uint8_t bDeviceSubClass;
  85      =1       volatile uint8_t bDeviceProtocol;
  86      =1       volatile uint8_t bMaxPacketSize0;
  87      =1       volatile uint16_t idVendor;
  88      =1       volatile uint16_t idProduct;
  89      =1       volatile uint16_t bcdDevice;
  90      =1       volatile uint8_t iManufacturer;
  91      =1       volatile uint8_t iProduct;
  92      =1       volatile uint8_t iSerialNumber;
  93      =1       volatile uint8_t bNumConfigurations;
  94      =1  } hal_usb_dev_desc_t;
  95      =1  
  96      =1  typedef struct {
  97      =1       volatile uint8_t bLength;
  98      =1       volatile uint8_t bDescriptorType;
  99      =1       volatile uint16_t wTotalLength;
 100      =1       volatile uint8_t bNumInterfaces;
 101      =1       volatile uint8_t bConfigurationValue;
 102      =1       volatile uint8_t iConfiguration;
 103      =1       volatile uint8_t bmAttributes;
 104      =1       volatile uint8_t bMaxPower;
 105      =1  } hal_usb_conf_desc_t;
 106      =1  
 107      =1  typedef struct {
 108      =1       volatile uint8_t bLength;
 109      =1       volatile uint8_t bDescriptorType;
 110      =1       volatile uint8_t bInterfaceNumber;
 111      =1       volatile uint8_t bAlternateSetting;
 112      =1       volatile uint8_t bNumEndpoints;
 113      =1       volatile uint8_t bInterfaceClass;
 114      =1       volatile uint8_t bInterfaceSubClass;
 115      =1       volatile uint8_t bInterfaceProtocol;
 116      =1       volatile uint8_t iInterface;
 117      =1  } hal_usb_if_desc_t;
 118      =1  
 119      =1  typedef struct {
 120      =1       volatile uint8_t bLength;
 121      =1       volatile uint8_t bDescriptorType;
 122      =1       volatile uint8_t bEndpointAddress;
 123      =1       volatile uint8_t bmAttributes;
 124      =1       volatile uint16_t wMaxPacketSize;
 125      =1       volatile uint8_t bInterval;
 126      =1  } hal_usb_ep_desc_t;
 127      =1  
 128      =1  typedef struct {
 129      =1      volatile uint8_t bLength;
 130      =1      volatile uint8_t bDescriptorType;
 131      =1      volatile uint16_t bcdHID;
 132      =1      volatile uint8_t bCountryCode;
 133      =1      volatile uint8_t bNumDescriptors;
 134      =1      volatile uint8_t bDescriptorType2;
 135      =1      volatile uint16_t wDescriptorLength;
 136      =1  } hal_usb_hid_desc_t;
 137      =1  
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 13  

 138      =1  typedef struct {
 139      =1       volatile uint8_t* desc;
 140      =1  } hal_usb_string_desc_t;
 141      =1  
 142      =1  typedef struct {
 143      =1       volatile uint8_t bLength;
 144      =1       volatile uint8_t bDescriptorType;
 145      =1  } hal_usb_common_desc_t;
 146      =1  
 147      =1  
 148      =1  #endif // HAL_USB_DESC_H__
  28          #include "usb.h"
   1      =1  /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2      =1   *
   3      =1   * The information contained herein is confidential property of Nordic 
   4      =1   * Semiconductor ASA.Terms and conditions of usage are described in detail 
   5      =1   * in NORDIC SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6      =1   *
   7      =1   * Licensees are granted free, non-transferable use of the information. NO
   8      =1   * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9      =1   * the file.
  10      =1   *              
  11      =1   * $LastChangedRevision: 133 $
  12      =1   */ 
  13      =1  
  14      =1  /** @file
  15      =1   * @brief This file contain definitions related to the USB-controller and internal structures
  16      =1   */
  17      =1  
  18      =1  #ifndef USB_H__
  19      =1  #define USB_H__
  20      =1  
  21      =1  #include <stdint.h>
   1      =2  /* Copyright (c) 2007 Nordic Semiconductor. All Rights Reserved.
   2      =2   *
   3      =2   * The information contained herein is property of Nordic Semiconductor ASA.
   4      =2   * Terms and conditions of usage are described in detail in NORDIC
   5      =2   * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6      =2   *
   7      =2   * Licensees are granted free, non-transferable use of the information. NO
   8      =2   * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9      =2   * the file.
  10      =2   *
  11      =2   * $LastChangedRevision: 186 $
  12      =2   */
  13      =2  
  14      =2  /** @file
  15      =2   * Type definitions for firmware projects developed at Nordic Semiconductor.
  16      =2   *
  17      =2   * Standard storage classes in C, such as @c char, @c int, and @c long, are not always
  18      =2   * interpreted in the same way by the compiler. The types here are defined by their
  19      =2   * bit length and signed/unsigned property, as their names indicate. The correlation
  20      =2   * between the name and properties of the storage class should be true, regardless of
  21      =2   * the compiler being used.
  22      =2   */
  23      =2  
  24      =2  #ifndef __STDINT_H__
           =2 #define __STDINT_H__
           =2 
           =2 #ifdef __C51__
           =2 
           =2 typedef unsigned char uint8_t;        ///< 8 bit unsigned int
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 14  

           =2 
           =2 typedef signed char int8_t;          ///< 8 bit signed int
           =2 
           =2 typedef unsigned int uint16_t;        ///< 16 bit unsigned int
           =2 
           =2 typedef signed int int16_t;          ///< 16 bit signed int
           =2 
           =2 typedef unsigned long uint32_t;       ///< 32 bit unsigned int
           =2 
           =2 typedef signed long int32_t;         ///< 32 bit signed int
           =2 
           =2 #endif // __C51__
           =2 
           =2 #ifndef NULL
           =2 #define NULL (void*)0
           =2 #endif
           =2 
           =2 #endif // __STDINT_H__
  22      =1  
  23      =1  #include "hal_usb.h"
   1      =2  /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2      =2   *
   3      =2   * The information contained herein is confidential property of Nordic 
   4      =2   * Semiconductor ASA.Terms and conditions of usage are described in detail 
   5      =2   * in NORDIC SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6      =2   *
   7      =2   * Licensees are granted free, non-transferable use of the information. NO
   8      =2   * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9      =2   * the file.
  10      =2   *              
  11      =2   * $LastChangedRevision: 181 $
  12      =2   */
  13      =2  
  14      =2  /** @file
  15      =2   * @brief Interface for the USB device controller.
  16      =2   *
  17      =2   * The header file must define the following type-defined structs:
  18      =2   *  - hal_usb_conf_desc_templ_t
  19      =2   *  - hal_usb_string_desc_templ_t
  20      =2   *  - hal_usb_dev_desc_templ_t
  21      =2   *  .
  22      =2   * And the following global variables:
  23      =2   *  - g_usb_string_desc
  24      =2   *  - g_usb_conf_desc
  25      =2   *  - g_usb_dev_desc
  26      =2   *
  27      =2   * @defgroup hal_nrf24lu1p_hal_usb Universal Serial Bus (hal_usb)
  28      =2   * @{
  29      =2   * @ingroup hal_nrf24lu1p
  30      =2   *
  31      =2   * <h1>Control Transfer Functionality</h1>
  32      =2   *
  33      =2   * <h2>Descriptor Requests</h2>
  34      =2   * The module handles the following <b>descriptor requests</b>:
  35      =2   * - Device
  36      =2   * - Configuration
  37      =2   * - String
  38      =2   *
  39      =2   * It does <b>not</b> support (replies with STALL to USB host controller):
  40      =2   * - Interface
  41      =2   * - DeviceQual
  42      =2   * - OtherSpeedConf
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 15  

  43      =2   * - InterfacePower
  44      =2   * 
  45      =2   * All other descriptor requests (HID, ...) are made available to the application code through the hal_usb
             -_cb_device_req_t callback.
  46      =2   *
  47      =2   * The module does <b>not</b> support SetDescriptor requests
  48      =2   *
  49      =2   * <h2>Feature Requests</h2>
  50      =2   *
  51      =2   * The module handles the following feature requests:
  52      =2   * -  DeviceRemoteWakeup
  53      =2   * -  EndpointHalt
  54      =2   * 
  55      =2   * It does <b>not</b> support (replies with STALL to USB host controller) any other feature requests yet
  56      =2   *
  57      =2   * <h2>Configuration Requests</h2>
  58      =2   *
  59      =2   * The module do only support setting configuration 0 (sets the adressed state) and 1. Other configuration
             -s replies with STALL. Several configurations for a device is not implemented.
  60      =2   * 
  61      =2   * <h2>Alternative Interface Requests</h2>
  62      =2   *
  63      =2   * Setting and getting alternative interfaces are not supported (replies with STALL to USB host controller
             -)
  64      =2   * 
  65      =2   * <h2>Sync Frame Requests</h2>
  66      =2   * Not supported
  67      =2   * 
  68      =2   * <h2>Class Specific Requests</h2>
  69      =2   * All class specific requests are made available to the application code through the hal_usb_cb_device_re
             -q_t callback. 
  70      =2   *
  71      =2   * <h1>Endpoint Functionality</h1>
  72      =2   * All available IN and OUT endpoints are avialable to the application through the hal_usb_send_packet, ha
             -l_usb_receive_packet functions and the callbacks registered for the endpoint. The callback functions are called when the
             - host replies with an ACK for having received a packet or when the host has sent an OUT packet. 
  73      =2   * 
  74      =2   * Isochronos endpoints are not supported in this version of USB HAL.
  75      =2   */
  76      =2  
  77      =2  #ifndef HAL_USB_H__
  78      =2  #define HAL_USB_H__
  79      =2  
  80      =2  #include <stdint.h>
   1      =3  /* Copyright (c) 2007 Nordic Semiconductor. All Rights Reserved.
   2      =3   *
   3      =3   * The information contained herein is property of Nordic Semiconductor ASA.
   4      =3   * Terms and conditions of usage are described in detail in NORDIC
   5      =3   * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6      =3   *
   7      =3   * Licensees are granted free, non-transferable use of the information. NO
   8      =3   * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9      =3   * the file.
  10      =3   *
  11      =3   * $LastChangedRevision: 186 $
  12      =3   */
  13      =3  
  14      =3  /** @file
  15      =3   * Type definitions for firmware projects developed at Nordic Semiconductor.
  16      =3   *
  17      =3   * Standard storage classes in C, such as @c char, @c int, and @c long, are not always
  18      =3   * interpreted in the same way by the compiler. The types here are defined by their
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 16  

  19      =3   * bit length and signed/unsigned property, as their names indicate. The correlation
  20      =3   * between the name and properties of the storage class should be true, regardless of
  21      =3   * the compiler being used.
  22      =3   */
  23      =3  
  24      =3  #ifndef __STDINT_H__
           =3 #define __STDINT_H__
           =3 
           =3 #ifdef __C51__
           =3 
           =3 typedef unsigned char uint8_t;        ///< 8 bit unsigned int
           =3 
           =3 typedef signed char int8_t;          ///< 8 bit signed int
           =3 
           =3 typedef unsigned int uint16_t;        ///< 16 bit unsigned int
           =3 
           =3 typedef signed int int16_t;          ///< 16 bit signed int
           =3 
           =3 typedef unsigned long uint32_t;       ///< 32 bit unsigned int
           =3 
           =3 typedef signed long int32_t;         ///< 32 bit signed int
           =3 
           =3 #endif // __C51__
           =3 
           =3 #ifndef NULL
           =3 #define NULL (void*)0
           =3 #endif
           =3 
           =3 #endif // __STDINT_H__
  81      =2  #include <stdbool.h>
   1      =3  /* Copyright (c) 2007 Nordic Semiconductor. All Rights Reserved.
   2      =3   *
   3      =3   * The information contained herein is property of Nordic Semiconductor ASA.
   4      =3   * Terms and conditions of usage are described in detail in NORDIC
   5      =3   * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT.
   6      =3   *
   7      =3   * Licensees are granted free, non-transferable use of the information. NO
   8      =3   * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9      =3   * the file.
  10      =3   *
  11      =3   * $LastChangedRevision: 230 $
  12      =3   */
  13      =3  
  14      =3  /** @file
  15      =3   * Type definitions for firmware projects developed at Nordic Semiconductor.
  16      =3   *
  17      =3   * Standard storage classes in C, such as @c char, @c int, and @c long, are not always
  18      =3   * interpreted in the same way by the compiler. The types here are defined by their
  19      =3   * bit length and signed/unsigned property, as their names indicate. The correlation
  20      =3   * between the name and properties of the storage class should be true, regardless of
  21      =3   * the compiler being used.
  22      =3   */
  23      =3  
  24      =3  #ifndef __STDBOOL_H__
  25      =3  #define __STDBOOL_H__
  26      =3  
  27      =3  //lint -strong(b,_Bool)
  28      =3  typedef unsigned char _Bool; ///< Boolean type
  29      =3  
  30      =3  #define bool _Bool
  31      =3  #define true ((bool)1)
  32      =3  #define false ((bool)0)
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 17  

  33      =3  #define __bool_true_false_are_defined 1
  34      =3  
  35      =3  #endif // __STDBOOL_H__
  82      =2  
  83      =2  #include "hal_usb_desc.h"
   1      =3  /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2      =3   *
   3      =3   * The information contained herein is confidential property of Nordic 
   4      =3   * Semiconductor ASA.Terms and conditions of usage are described in detail 
   5      =3   * in NORDIC SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6      =3   *
   7      =3   * Licensees are granted free, non-transferable use of the information. NO
   8      =3   * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9      =3   * the file.
  10      =3   *              
  11      =3   * $LastChangedRevision: 133 $
  12      =3   */
  13      =3  
  14      =3  /** @file
  15      =3  * @brief This file contain structures and constants defined in Chapter 9 of the USB 2.0 standard
  16      =3   */
  17      =3  
  18      =3  #ifndef HAL_USB_DESC_H__
           =3 #define HAL_USB_DESC_H__
           =3 
           =3 #include <stdint.h>
           =3 
           =3 // Standard request codes
           =3 #define USB_REQ_GET_STATUS         0x00
           =3 #define USB_REQ_CLEAR_FEATURE      0x01
           =3 #define USB_REQ_RESERVED_1         0x02
           =3 #define USB_REQ_SET_FEATURE        0x03
           =3 #define USB_REQ_RESERVED_2         0x04
           =3 #define USB_REQ_SET_ADDRESS        0x05
           =3 #define USB_REQ_GET_DESCRIPTOR     0x06
           =3 #define USB_REQ_SET_DESCRIPTOR     0x07
           =3 #define USB_REQ_GET_CONFIGURATION  0x08
           =3 #define USB_REQ_SET_CONFIGURATION  0x09
           =3 #define USB_REQ_GET_INTERFACE      0x0a
           =3 #define USB_REQ_SET_INTERFACE      0x0b
           =3 #define USB_REQ_SYNCH_FRAME        0x0c
           =3 
           =3 // Descriptor types
           =3 #define USB_DESC_DEVICE           0x01
           =3 #define USB_DESC_CONFIGURATION    0x02
           =3 #define USB_DESC_STRING           0x03
           =3 #define USB_DESC_INTERFACE        0x04
           =3 #define USB_DESC_ENDPOINT         0x05
           =3 #define USB_DESC_DEVICE_QUAL      0x06
           =3 #define USB_DESC_OTHER_SPEED_CONF 0x07
           =3 #define USB_DESC_INTERFACE_POWER  0x08
           =3 #define USB_DESC_OTG              0x09
           =3 #define USB_DESC_DEBUG            0x0A
           =3 #define USB_DESC_INTERFACE_ASSOC  0x0B
           =3 
           =3 #define USB_ENDPOINT_TYPE_CONTROL           0x00
           =3 #define USB_ENDPOINT_TYPE_ISOCHRONOUS       0x01
           =3 #define USB_ENDPOINT_TYPE_BULK              0x02
           =3 #define USB_ENDPOINT_TYPE_INTERRUPT         0x03
           =3 
           =3 // USB device classes
           =3 #define USB_DEVICE_CLASS_RESERVED               0x00
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 18  

           =3 #define USB_DEVICE_CLASS_AUDIO                  0x01
           =3 #define USB_DEVICE_CLASS_COMMUNICATIONS         0x02
           =3 #define USB_DEVICE_CLASS_HUMAN_INTERFACE        0x03
           =3 #define USB_DEVICE_CLASS_MONITOR                0x04
           =3 #define USB_DEVICE_CLASS_PHYSICAL_INTERFACE     0x05
           =3 #define USB_DEVICE_CLASS_POWER                  0x06
           =3 #define USB_DEVICE_CLASS_PRINTER                0x07
           =3 #define USB_DEVICE_CLASS_STORAGE                0x08
           =3 #define USB_DEVICE_CLASS_HUB                    0x09
           =3 #define USB_DEVICE_CLASS_APPLICATION_SPECIFIC   0xFE
           =3 #define USB_DEVICE_CLASS_VENDOR_SPECIFIC        0xFF
           =3 
           =3 
           =3 #define USB_CLASS_DESCRIPTOR_HID    0x21
           =3 #define USB_CLASS_DESCRIPTOR_REPORT 0x22
           =3 #define USB_CLASS_DESCRIPTOR_PHYSICAL_DESCRIPTOR 0x23
           =3 
           =3 #define USB_DEVICE_REMOTE_WAKEUP    0x01
           =3 #define USB_ENDPOINT_HALT           0x00
           =3 #define USB_TEST_MODE               0x02
           =3 
           =3 typedef struct {
           =3      volatile uint8_t bLength;
           =3      volatile uint8_t bDescriptorType;
           =3      volatile uint16_t bcdUSB;
           =3      volatile uint8_t bDeviceClass;
           =3      volatile uint8_t bDeviceSubClass;
           =3      volatile uint8_t bDeviceProtocol;
           =3      volatile uint8_t bMaxPacketSize0;
           =3      volatile uint16_t idVendor;
           =3      volatile uint16_t idProduct;
           =3      volatile uint16_t bcdDevice;
           =3      volatile uint8_t iManufacturer;
           =3      volatile uint8_t iProduct;
           =3      volatile uint8_t iSerialNumber;
           =3      volatile uint8_t bNumConfigurations;
           =3 } hal_usb_dev_desc_t;
           =3 
           =3 typedef struct {
           =3      volatile uint8_t bLength;
           =3      volatile uint8_t bDescriptorType;
           =3      volatile uint16_t wTotalLength;
           =3      volatile uint8_t bNumInterfaces;
           =3      volatile uint8_t bConfigurationValue;
           =3      volatile uint8_t iConfiguration;
           =3      volatile uint8_t bmAttributes;
           =3      volatile uint8_t bMaxPower;
           =3 } hal_usb_conf_desc_t;
           =3 
           =3 typedef struct {
           =3      volatile uint8_t bLength;
           =3      volatile uint8_t bDescriptorType;
           =3      volatile uint8_t bInterfaceNumber;
           =3      volatile uint8_t bAlternateSetting;
           =3      volatile uint8_t bNumEndpoints;
           =3      volatile uint8_t bInterfaceClass;
           =3      volatile uint8_t bInterfaceSubClass;
           =3      volatile uint8_t bInterfaceProtocol;
           =3      volatile uint8_t iInterface;
           =3 } hal_usb_if_desc_t;
           =3 
           =3 typedef struct {
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 19  

           =3      volatile uint8_t bLength;
           =3      volatile uint8_t bDescriptorType;
           =3      volatile uint8_t bEndpointAddress;
           =3      volatile uint8_t bmAttributes;
           =3      volatile uint16_t wMaxPacketSize;
           =3      volatile uint8_t bInterval;
           =3 } hal_usb_ep_desc_t;
           =3 
           =3 typedef struct {
           =3     volatile uint8_t bLength;
           =3     volatile uint8_t bDescriptorType;
           =3     volatile uint16_t bcdHID;
           =3     volatile uint8_t bCountryCode;
           =3     volatile uint8_t bNumDescriptors;
           =3     volatile uint8_t bDescriptorType2;
           =3     volatile uint16_t wDescriptorLength;
           =3 } hal_usb_hid_desc_t;
           =3 
           =3 typedef struct {
           =3      volatile uint8_t* desc;
           =3 } hal_usb_string_desc_t;
           =3 
           =3 typedef struct {
           =3      volatile uint8_t bLength;
           =3      volatile uint8_t bDescriptorType;
           =3 } hal_usb_common_desc_t;
           =3 
           =3 
           =3 #endif // HAL_USB_DESC_H__
  84      =2  #include "config.h" 
   1      =3  /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2      =3   *
   3      =3   * The information contained herein is confidential property of Nordic 
   4      =3   * Semiconductor ASA.Terms and conditions of usage are described in detail 
   5      =3   * in NORDIC SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6      =3   *
   7      =3   * Licensees are granted free, non-transferable use of the information. NO
   8      =3   * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9      =3   * the file.
  10      =3   *              
  11      =3   * $LastChangedRevision: 5718 $
  12      =3   */
  13      =3  
  14      =3  /** @file
  15      =3   * Configuration file for bootloader
  16      =3   *
  17      =3   */
  18      =3  #ifndef CONFIG_H__
  19      =3  #define CONFIG_H__
  20      =3  
  21      =3  #define FLASH_PAGE_SIZE     512U
  22      =3  #define MAX_PACKET_SIZE_EP0 32
  23      =3  #define USB_EP1_SIZE        64
  24      =3  #define FLASH_SIZE          (32U*1024U)
  25      =3  #define NUM_FLASH_PAGES     FLASH_SIZE/FLASH_PAGE_SIZE
  26      =3  
  27      =3  #endif // CONFIG_H__
  85      =2  #include "usb_desc_bulk.h"
   1      =3  /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2      =3   *
   3      =3   * The information contained herein is confidential property of Nordic 
   4      =3   * Semiconductor ASA.Terms and conditions of usage are described in detail 
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 20  

   5      =3   * in NORDIC SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6      =3   *
   7      =3   * Licensees are granted free, non-transferable use of the information. NO
   8      =3   * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9      =3   * the file.
  10      =3   *              
  11      =3   * $LastChangedRevision: 5718 $
  12      =3   */
  13      =3  
  14      =3  /** @file
  15      =3   * Header file for the Bootloader USB descriptor
  16      =3   *
  17      =3   */
  18      =3  #ifndef USB_DESC_BULK_H__
  19      =3  #define USB_DESC_BULK_H__
  20      =3  
  21      =3  #include "hal_usb_desc.h"
   1      =4  /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2      =4   *
   3      =4   * The information contained herein is confidential property of Nordic 
   4      =4   * Semiconductor ASA.Terms and conditions of usage are described in detail 
   5      =4   * in NORDIC SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6      =4   *
   7      =4   * Licensees are granted free, non-transferable use of the information. NO
   8      =4   * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9      =4   * the file.
  10      =4   *              
  11      =4   * $LastChangedRevision: 133 $
  12      =4   */
  13      =4  
  14      =4  /** @file
  15      =4  * @brief This file contain structures and constants defined in Chapter 9 of the USB 2.0 standard
  16      =4   */
  17      =4  
  18      =4  #ifndef HAL_USB_DESC_H__
           =4 #define HAL_USB_DESC_H__
           =4 
           =4 #include <stdint.h>
           =4 
           =4 // Standard request codes
           =4 #define USB_REQ_GET_STATUS         0x00
           =4 #define USB_REQ_CLEAR_FEATURE      0x01
           =4 #define USB_REQ_RESERVED_1         0x02
           =4 #define USB_REQ_SET_FEATURE        0x03
           =4 #define USB_REQ_RESERVED_2         0x04
           =4 #define USB_REQ_SET_ADDRESS        0x05
           =4 #define USB_REQ_GET_DESCRIPTOR     0x06
           =4 #define USB_REQ_SET_DESCRIPTOR     0x07
           =4 #define USB_REQ_GET_CONFIGURATION  0x08
           =4 #define USB_REQ_SET_CONFIGURATION  0x09
           =4 #define USB_REQ_GET_INTERFACE      0x0a
           =4 #define USB_REQ_SET_INTERFACE      0x0b
           =4 #define USB_REQ_SYNCH_FRAME        0x0c
           =4 
           =4 // Descriptor types
           =4 #define USB_DESC_DEVICE           0x01
           =4 #define USB_DESC_CONFIGURATION    0x02
           =4 #define USB_DESC_STRING           0x03
           =4 #define USB_DESC_INTERFACE        0x04
           =4 #define USB_DESC_ENDPOINT         0x05
           =4 #define USB_DESC_DEVICE_QUAL      0x06
           =4 #define USB_DESC_OTHER_SPEED_CONF 0x07
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 21  

           =4 #define USB_DESC_INTERFACE_POWER  0x08
           =4 #define USB_DESC_OTG              0x09
           =4 #define USB_DESC_DEBUG            0x0A
           =4 #define USB_DESC_INTERFACE_ASSOC  0x0B
           =4 
           =4 #define USB_ENDPOINT_TYPE_CONTROL           0x00
           =4 #define USB_ENDPOINT_TYPE_ISOCHRONOUS       0x01
           =4 #define USB_ENDPOINT_TYPE_BULK              0x02
           =4 #define USB_ENDPOINT_TYPE_INTERRUPT         0x03
           =4 
           =4 // USB device classes
           =4 #define USB_DEVICE_CLASS_RESERVED               0x00
           =4 #define USB_DEVICE_CLASS_AUDIO                  0x01
           =4 #define USB_DEVICE_CLASS_COMMUNICATIONS         0x02
           =4 #define USB_DEVICE_CLASS_HUMAN_INTERFACE        0x03
           =4 #define USB_DEVICE_CLASS_MONITOR                0x04
           =4 #define USB_DEVICE_CLASS_PHYSICAL_INTERFACE     0x05
           =4 #define USB_DEVICE_CLASS_POWER                  0x06
           =4 #define USB_DEVICE_CLASS_PRINTER                0x07
           =4 #define USB_DEVICE_CLASS_STORAGE                0x08
           =4 #define USB_DEVICE_CLASS_HUB                    0x09
           =4 #define USB_DEVICE_CLASS_APPLICATION_SPECIFIC   0xFE
           =4 #define USB_DEVICE_CLASS_VENDOR_SPECIFIC        0xFF
           =4 
           =4 
           =4 #define USB_CLASS_DESCRIPTOR_HID    0x21
           =4 #define USB_CLASS_DESCRIPTOR_REPORT 0x22
           =4 #define USB_CLASS_DESCRIPTOR_PHYSICAL_DESCRIPTOR 0x23
           =4 
           =4 #define USB_DEVICE_REMOTE_WAKEUP    0x01
           =4 #define USB_ENDPOINT_HALT           0x00
           =4 #define USB_TEST_MODE               0x02
           =4 
           =4 typedef struct {
           =4      volatile uint8_t bLength;
           =4      volatile uint8_t bDescriptorType;
           =4      volatile uint16_t bcdUSB;
           =4      volatile uint8_t bDeviceClass;
           =4      volatile uint8_t bDeviceSubClass;
           =4      volatile uint8_t bDeviceProtocol;
           =4      volatile uint8_t bMaxPacketSize0;
           =4      volatile uint16_t idVendor;
           =4      volatile uint16_t idProduct;
           =4      volatile uint16_t bcdDevice;
           =4      volatile uint8_t iManufacturer;
           =4      volatile uint8_t iProduct;
           =4      volatile uint8_t iSerialNumber;
           =4      volatile uint8_t bNumConfigurations;
           =4 } hal_usb_dev_desc_t;
           =4 
           =4 typedef struct {
           =4      volatile uint8_t bLength;
           =4      volatile uint8_t bDescriptorType;
           =4      volatile uint16_t wTotalLength;
           =4      volatile uint8_t bNumInterfaces;
           =4      volatile uint8_t bConfigurationValue;
           =4      volatile uint8_t iConfiguration;
           =4      volatile uint8_t bmAttributes;
           =4      volatile uint8_t bMaxPower;
           =4 } hal_usb_conf_desc_t;
           =4 
           =4 typedef struct {
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 22  

           =4      volatile uint8_t bLength;
           =4      volatile uint8_t bDescriptorType;
           =4      volatile uint8_t bInterfaceNumber;
           =4      volatile uint8_t bAlternateSetting;
           =4      volatile uint8_t bNumEndpoints;
           =4      volatile uint8_t bInterfaceClass;
           =4      volatile uint8_t bInterfaceSubClass;
           =4      volatile uint8_t bInterfaceProtocol;
           =4      volatile uint8_t iInterface;
           =4 } hal_usb_if_desc_t;
           =4 
           =4 typedef struct {
           =4      volatile uint8_t bLength;
           =4      volatile uint8_t bDescriptorType;
           =4      volatile uint8_t bEndpointAddress;
           =4      volatile uint8_t bmAttributes;
           =4      volatile uint16_t wMaxPacketSize;
           =4      volatile uint8_t bInterval;
           =4 } hal_usb_ep_desc_t;
           =4 
           =4 typedef struct {
           =4     volatile uint8_t bLength;
           =4     volatile uint8_t bDescriptorType;
           =4     volatile uint16_t bcdHID;
           =4     volatile uint8_t bCountryCode;
           =4     volatile uint8_t bNumDescriptors;
           =4     volatile uint8_t bDescriptorType2;
           =4     volatile uint16_t wDescriptorLength;
           =4 } hal_usb_hid_desc_t;
           =4 
           =4 typedef struct {
           =4      volatile uint8_t* desc;
           =4 } hal_usb_string_desc_t;
           =4 
           =4 typedef struct {
           =4      volatile uint8_t bLength;
           =4      volatile uint8_t bDescriptorType;
           =4 } hal_usb_common_desc_t;
           =4 
           =4 
           =4 #endif // HAL_USB_DESC_H__
  22      =3  
  23      =3  #define USB_DESC_TEMPLATE 
  24      =3  
  25      =3  //------------------------------------------ 
  26      =3  // Vendor ID and Product ID definitions 
  27      =3  //------------------------------------------ 
  28      =3  #define VID   0x1915 
  29      =3  #define PID   0x0909 
  30      =3  
  31      =3  #define USB_STRING_DESC_COUNT 2
  32      =3  
  33      =3  typedef struct
  34      =3  {
  35      =3      hal_usb_conf_desc_t conf;
  36      =3      hal_usb_if_desc_t if0;
  37      =3      hal_usb_ep_desc_t ep1in;
  38      =3      hal_usb_ep_desc_t ep1out;
  39      =3  } usb_conf_desc_templ_t;
  40      =3  
  41      =3  typedef struct { 
  42      =3       volatile uint8_t* idx[USB_STRING_DESC_COUNT]; 
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 23  

  43      =3  } usb_string_desc_templ_t; 
  44      =3  
  45      =3  extern code usb_string_desc_templ_t g_usb_string_desc; 
  46      =3  extern code usb_conf_desc_templ_t g_usb_conf_desc;
  47      =3  extern code hal_usb_dev_desc_t g_usb_dev_desc;
  48      =3  
  49      =3  typedef struct { 
  50      =3       hal_usb_dev_desc_t* dev; 
  51      =3       usb_conf_desc_templ_t* conf; 
  52      =3       usb_string_desc_templ_t* string; 
  53      =3       uint8_t string_zero[4]; 
  54      =3  } usb_descs_templ_t;
  55      =3  
  56      =3  extern code uint8_t g_usb_string_desc_1[];
  57      =3  extern code uint8_t g_usb_string_desc_2[];
  58      =3  extern code uint8_t string_zero[4];
  59      =3  
  60      =3  #endif  // USB_DESC_TEMPL_H__
  86      =2  
  87      =2  #ifndef USB_DESC_TEMPLATE
           =2 #error "USB_DESC_TEMPLATE not defined. Please include a file with g_usb_string_desc, g_usb_conf_desc and g
             -_usb_dev_desc defined" 
           =2 #endif
  90      =2  
  91      =2  #define USB_BM_STATE_CONFIGURED 0x01
  92      =2  #define USB_BM_STATE_ALLOW_REMOTE_WAKEUP 0x02
  93      =2  #define USB_BM_STATE_HOST_WU     0x04
  94      =2  
  95      =2  /** An enum describing the USB state
  96      =2   * 
  97      =2   *  The states described in this enum are found in Chapter 9 of the USB 2.0 specification
  98      =2   */
  99      =2  
 100      =2  typedef enum  { 
 101      =2      ATTACHED,   /**< Device is attached to the USB, but is not powered */
 102      =2      POWERED,    /**< Device is attached to the USB and powered */
 103      =2      DEFAULT,    /**< Device is attached to the USB and powered and has been reset, but has not been assign
             -ed a unique address */
 104      =2      ADDRESSED,  /**< Device is attached to the USB, powered, has been reset, and a unique device address h
             -as been assigned. Device is not configured */
 105      =2      CONFIGURED, /**< Device is attached to the USB, powered, has been reset, has a unique address, is conf
             -igured and is not suspended */
 106      =2      SUSPENDED   /**< Device is, at a minimum, attached to the USB and is powered and has not seen bus acti
             -vity for 3ms. It may also have a unique address and be configured for use. However, because the device is suspended, the
             - host may not use the device configuration */
 107      =2  } hal_usb_state_t;
 108      =2  
 109      =2  /** Structure containing the USB standard request
 110      =2   *  See Chapter 9 USB Device Framework in the USB 2.0 specification.
 111      =2   */
 112      =2  
 113      =2  typedef struct {
 114      =2      uint8_t  bmRequestType; /**< Bitmapped field identifying the characteristics of the request.
 115      =2                          - D7: Data transfer direction 
 116      =2                          - 0 = Host-to-device
 117      =2                          - 1 = Device-to-host
 118      =2  
 119      =2                          - D6..5: Type
 120      =2                          - 0 = Standard
 121      =2                          - 1 = Class
 122      =2                          - 2 = Vendor
 123      =2                          - 3 = Reserved
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 24  

 124      =2  
 125      =2                          - D4..0: Recipient
 126      =2                          - 0 = Device
 127      =2                          - 1 = Interface
 128      =2                          - 2 = Endpoint
 129      =2                          - 3 = Other
 130      =2                          - 4..31 = Reserved
 131      =2                            */
 132      =2      uint8_t  bRequest;       /**< Field specifying request. bmRequestType(Type) modifies the meaning of th
             -is field. */
 133      =2  
 134      =2      uint8_t wValueMsb;      /**< Field used to pass a parameter to the device, specific to the request. MS
             -B*/
 135      =2      uint8_t wValueLsb;      /**< Field used to pass a parameter to the device, specific to the request. LS
             -B*/
 136      =2      uint8_t wIndex;         /**< Field used to pass a parameter to the device, specific to the request. */
 137      =2      uint8_t wLength;        /**< Field used to specify length of the data transferred during the second ph
             -ase of the control transfer. Direction of data transfer given by bmRequestType(Direction). If field is zero there is no 
             -data transfer phase. */
 138      =2  //    void* misc_data;
 139      =2  } hal_usb_device_req;
 140      =2  
 141      =2  /** An enum describing which reply to send to the control request
 142      =2   */
 143      =2  
 144      =2  typedef enum {
 145      =2      STALL,         /**< Respond with STALL */
 146      =2      NAK,           /**< Respond with NAK   */
 147      =2      ACK,           /**< Respond with ACK (if this is an OUT request) */
 148      =2      NO_RESPONSE,   /**< Do not respond */
 149      =2      DATA,          /**< Data is available */
 150      =2      EMPTY_RESPONSE /**< Send an empty response */
 151      =2  } hal_usb_dev_req_resp_t;
 152      =2  
 153      =2  uint8_t ep_1_out_cb(uint8_t xdata *, uint8_t xdata *) reentrant;
 154      =2  
 155      =2  /** Callback function that is called when a class request is received.
 156      =2   *  The type of class request is determined by the interface the request is for. If interface 1 is a HID i
             -nterface the request is a HID class request.
 157      =2   *  @param std_req The complete request. 
 158      =2   *  @param data_ptr Pointer to pointer to data(descriptor struct) the function wants to send back to USB-h
             -ost
 159      =2   *  @param size Size of data the function wants to send back to USB-host
 160      =2   */
 161      =2  
 162      =2  typedef hal_usb_dev_req_resp_t (*hal_usb_cb_device_req_t)(hal_usb_device_req* device_req, uint8_t ** data_
             -ptr, uint8_t* size) reentrant;
 163      =2  
 164      =2  /** Callback function that is called when an endpoint interrupt occurs 
 165      =2   *  @param adr_ptr IN endpoint: Pointer to address containing data to send. OUT endpoint: Pointer to addre
             -ss containg data received.
 166      =2   *  @param size IN endpoint: Number of bytes to send. OUT endpoint: number of bytes received.
 167      =2   *  @retval Bit 7 Set: STALL request
 168      =2   *  @retval Bit 6 Set: NACK request
 169      =2   *  @retval Bit 5..0 : Bytes to send
 170      =2   */
 171      =2  typedef uint8_t (*hal_usb_cb_endpoint_t)(uint8_t* adr_ptr, uint8_t* size) reentrant;
 172      =2  
 173      =2  /** Callback function that is called when a resume is signalled on the bus.
 174      =2   *  A resume is signalled by the Data K state. For full-speed devices this is Differential "0". Differenti
             -al "0": D-> Voh(main) and D+ < Vol(max).
 175      =2   */
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 25  

 176      =2  
 177      =2  typedef void (*hal_usb_cb_resume_t)();
 178      =2  
 179      =2  /** Callback function that is called when a suspend condition occurs.
 180      =2   *  @param can_resume Set to 1 if the device is allowed to wake up the host controller
 181      =2   *  @see hal_usb_state_t
 182      =2   */
 183      =2  
 184      =2  typedef void (*hal_usb_cb_suspend_t)(uint8_t allow_remote_wu) reentrant;
 185      =2  
 186      =2  /** Callback function that is called when a reset condition occurs.
 187      =2   *  
 188      =2   */
 189      =2  typedef void (*hal_usb_cb_reset_t)();
 190      =2  
 191      =2  /** A struct containing variables related to the USB HAL layer 
 192      =2   *  
 193      =2   */
 194      =2  
 195      =2  typedef struct {
 196      =2      usb_descs_templ_t descs;     /**< Structure containing device, string and configuration descriptors fo
             -r a specific application */
 197      =2      uint8_t  bm_state;             /**< Bitmask containing USB state information: bitmask: 0 - is_hw_reset
             -, 1 - can signal remote wakeup, 2 - usb awake */
 198      =2      uint8_t current_config;        /**< Currently set configuration. If current_config is zero the device 
             -is not configured */
 199      =2      uint8_t current_alt_interface; /**< Currently alternative configuration. If an alternative configurati
             -on is chosen the index of the alternative configuration is stored here. */
 200      =2      hal_usb_state_t state;       /**< Enum containing USB state information as described in Chapter 9 of t
             -he USB 2.0 specification.  */
 201      =2  
 202      =2      hal_usb_cb_device_req_t device_req;
 203      =2      hal_usb_cb_reset_t      reset;
 204      =2      hal_usb_cb_resume_t     resume;
 205      =2      hal_usb_cb_suspend_t    suspend;
 206      =2  } hal_usb_t;
 207      =2  
 208      =2  /** Function for setting up the USB controller and registering the callbacks 
 209      =2   *  @param usb_disconnect Set to true to perform physical disconnect and reconnect. Make sure to enable in
             -terrupts as soon as possible after
 210      =2   *                        the call to this function.
 211      =2   *  @param device_req Pointer to function to call when a class specific request occur
 212      =2   *  @param reset Pointer to function to call when USB controller detects a reset
 213      =2   *  @param resume Pointer to function to call when USB controller detects a resume
 214      =2   *  @param suspend Pointer to function to call when USB controller detects a suspend
 215      =2   */
 216      =2  void hal_usb_init(
 217      =2      bool usb_disconnect,
 218      =2      hal_usb_cb_device_req_t device_req,
 219      =2      hal_usb_cb_reset_t      reset,
 220      =2      hal_usb_cb_resume_t     resume,
 221      =2      hal_usb_cb_suspend_t    suspend);
 222      =2  
 223      =2  /** Function to send a packet to host (IN endpoint)
 224      =2   *  @param ep_in_num IN endpointer number
 225      =2   *  @param buffer Pointer to buffer containing data to send
 226      =2   *  @param bytes_to_send Number of bytes to send.
 227      =2   */
 228      =2  void hal_usb_send_data(uint8_t ep_in_num, uint8_t* buffer, uint8_t bytes_to_send);
 229      =2  
 230      =2  /** Function to register callbacks for given endpoints 
 231      =2   *  To register a callback one have to have a function with an argument list equal to usb_endpoint_cb_t.
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 26  

 232      =2   *  @param ep_num Endpoint number. If MSB is set it indicates this is an IN endpoint.
 233      =2   *  @param ep_size The maximum size of one packet for this endpoint
 234      =2   *  @param endpoint_isr Pointer to function that is called when host issues a request on the given endpoin
             -t. Set to 0 to unregister function.
 235      =2   */
 236      =2  void hal_usb_endpoint_config(uint8_t ep_num, uint8_t ep_size, hal_usb_cb_endpoint_t endpoint_isr);
 237      =2  
 238      =2  /** Function to stall or unstall an endpoint
 239      =2   *  @param ep_num Endpoint number. If MSB is set it indicates this is an IN endpoint.
 240      =2   *  @param stall 1 - stall the endpoint. 0 - unstall the endpoint.
 241      =2   */
 242      =2  void hal_usb_endpoint_stall(uint8_t ep_num, bool stall);
 243      =2  
 244      =2  /** Function returning the current state of the USB controller
 245      =2   *  @see usb_stat_t
 246      =2   */
 247      =2  hal_usb_state_t hal_usb_get_state();
 248      =2  
 249      =2  /** Function returning the assigned address for the device */
 250      =2  uint8_t hal_usb_get_address();
 251      =2  
 252      =2  /** Function to initiate a remote wakeup of the USB host */
 253      =2  void hal_usb_wakeup();
 254      =2  
 255      =2  /** Function to initiate a <b>hardware reset</b> of the USB-controller */
 256      =2  void hal_usb_reset();
 257      =2  
 258      =2  /** Function disconnecting the USB-controller from the USB bus  */
 259      =2  void hal_usb_bus_disconnect();
 260      =2  
 261      =2  /** Function connecting the USB-controller to the USB bus */
 262      =2  void hal_usb_bus_connect();
 263      =2  
 264      =2  /** Function stopping the clock to the usb controller or by other means powers it down */
 265      =2  void hal_usb_sleep();
 266      =2  
 267      =2  extern hal_usb_t g_hal_usb;
 268      =2  
 269      =2  #endif //  HAL_USB_H__
 270      =2  /** @} */
  24      =1  
  25      =1  #define USB_ENDPOINT_IN_COUNT 5
  26      =1  #define USB_ENDPOINT_OUT_COUNT 5
  27      =1  
  28      =1  #define USB_EP0_HSNAK() do { ep0cs = 0x02; } while(0)
  29      =1  #define USB_EP0_STALL() do { ep0cs = 0x11; } while(0) // Set both DSTALL and STALL when we want to stall a
             - request during a SETUP transaction
  30      =1  #define USB_EP0_DSTALL() do { ep0cs |= 0x10; } while(0)
  31      =1  
  32      =1  #define INT_SUDAV    0x00
  33      =1  #define INT_SOF      0x04
  34      =1  #define INT_SUTOK    0x08
  35      =1  #define INT_SUSPEND  0x0C
  36      =1  #define INT_USBRESET 0x10
  37      =1  #define INT_EP0IN    0x18
  38      =1  #define INT_EP0OUT   0x1C
  39      =1  #define INT_EP1IN    0x20
  40      =1  #define INT_EP1OUT   0x24
  41      =1  #define INT_EP2IN    0x28
  42      =1  #define INT_EP2OUT   0x2C
  43      =1  #define INT_EP3IN    0x30
  44      =1  #define INT_EP3OUT   0x34
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 27  

  45      =1  #define INT_EP4IN    0x38
  46      =1  #define INT_EP4OUT   0x3C
  47      =1  #define INT_EP5IN    0x40
  48      =1  #define INT_EP5OUT   0x44
  49      =1  
  50      =1  #define BM_REQUEST_TYPE  0
  51      =1  #define B_REQUEST        1
  52      =1  #define W_VALUE          2
  53      =1  #define W_INDEX          4
  54      =1  #define W_LENGTH         6
  55      =1  
  56      =1  typedef struct
  57      =1  {
  58      =1      uint8_t *data_ptr;
  59      =1      uint8_t data_size;
  60      =1      uint8_t pkt_size;
  61      =1  } packetizer_t;
  62      =1  
  63      =1  #endif
  29          #include "hal_delay.h"
   1      =1  #ifndef __HAL_DELAY_H
   2      =1  #define __HAL_DELAY_H 
   3      =1  #include "stdint.h"
   1      =2  /* Copyright (c) 2007 Nordic Semiconductor. All Rights Reserved.
   2      =2   *
   3      =2   * The information contained herein is property of Nordic Semiconductor ASA.
   4      =2   * Terms and conditions of usage are described in detail in NORDIC
   5      =2   * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6      =2   *
   7      =2   * Licensees are granted free, non-transferable use of the information. NO
   8      =2   * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9      =2   * the file.
  10      =2   *
  11      =2   * $LastChangedRevision: 186 $
  12      =2   */
  13      =2  
  14      =2  /** @file
  15      =2   * Type definitions for firmware projects developed at Nordic Semiconductor.
  16      =2   *
  17      =2   * Standard storage classes in C, such as @c char, @c int, and @c long, are not always
  18      =2   * interpreted in the same way by the compiler. The types here are defined by their
  19      =2   * bit length and signed/unsigned property, as their names indicate. The correlation
  20      =2   * between the name and properties of the storage class should be true, regardless of
  21      =2   * the compiler being used.
  22      =2   */
  23      =2  
  24      =2  #ifndef __STDINT_H__
           =2 #define __STDINT_H__
           =2 
           =2 #ifdef __C51__
           =2 
           =2 typedef unsigned char uint8_t;        ///< 8 bit unsigned int
           =2 
           =2 typedef signed char int8_t;          ///< 8 bit signed int
           =2 
           =2 typedef unsigned int uint16_t;        ///< 16 bit unsigned int
           =2 
           =2 typedef signed int int16_t;          ///< 16 bit signed int
           =2 
           =2 typedef unsigned long uint32_t;       ///< 32 bit unsigned int
           =2 
           =2 typedef signed long int32_t;         ///< 32 bit signed int
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 28  

           =2 
           =2 #endif // __C51__
           =2 
           =2 #ifndef NULL
           =2 #define NULL (void*)0
           =2 #endif
           =2 
           =2 #endif // __STDINT_H__
   4      =1  
   5      =1  /* This function overflows at 65535 us. 
   6      =1   * For Keil C51 compiler, this function is accurate down to 10 us, with deviantion of upto 2 us.
   7      =1   *
   8      =1   * For the IAR 8051 C compiler, the function is not as accurate before hitting about 500 us.
   9      =1   * Over this number, it seem to have a deviation of about 5 to 10 us.
  10      =1   */
  11      =1  void delay_us(uint16_t us);
  12      =1  
  13      =1  /* Function for looping "delay_us"
  14      =1   * 
  15      =1   */
  16      =1  void delay_ms(uint16_t ms);
  17      =1  
  18      =1  #define delay_s(x)  delay_ms((uint16_t)1000 * (uint16_t)x)
  19      =1  #endif
  30          
  31          
  32          #define ALLOCATE_USB_MAP
  33          #include "usb_map.h"
   1      =1  /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2      =1   *
   3      =1   * The information contained herein is confidential property of Nordic 
   4      =1   * Semiconductor ASA.Terms and conditions of usage are described in detail 
   5      =1   * in NORDIC SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6      =1   *
   7      =1   * Licensees are granted free, non-transferable use of the information. NO
   8      =1   * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9      =1   * the file.
  10      =1   *              
  11      =1   * $LastChangedRevision: 133 $
  12      =1   */
  13      =1  
  14      =1  /** @file
  15      =1   * @brief USB register layout and interrupts
  16      =1   *
  17      =1   * This file contain:
  18      =1   * - the USB-controller register layout
  19      =1   * - the USB-controller interrupts towards the MCU
  20      =1   *
  21      =1   * The usb_map_t structure is set to point at xdata address 0x0000
  22      =1   */
  23      =1  #ifndef USB_MAP_H__
  24      =1  #define USB_MAP_H__
  25      =1  
  26      =1  #ifdef ALLOCATE_USB_MAP
  27      =1  #define EXTERN
  28      =1  #define _AT_ _at_
  29      =1  #else
           =1 #define EXTERN extern
           =1 #define _AT_ ;/ ## /
           =1 #endif
  33      =1  
  34      =1  #define USB_EP_DEFAULT_BUF_SIZE 0x20 // (32)
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 29  

  35      =1  
  36      =1  __no_init EXTERN xdata volatile uint8_t out5buf[USB_EP_DEFAULT_BUF_SIZE] _AT_ 0xC440;
  37      =1  __no_init EXTERN xdata volatile uint8_t in5buf[USB_EP_DEFAULT_BUF_SIZE]  _AT_ 0xC480;
  38      =1  __no_init EXTERN xdata volatile uint8_t out4buf[USB_EP_DEFAULT_BUF_SIZE] _AT_ 0xC4C0;
  39      =1  __no_init EXTERN xdata volatile uint8_t in4buf[USB_EP_DEFAULT_BUF_SIZE]  _AT_ 0xC500;
  40      =1  __no_init EXTERN xdata volatile uint8_t out3buf[USB_EP_DEFAULT_BUF_SIZE] _AT_ 0xC540;
  41      =1  __no_init EXTERN xdata volatile uint8_t in3buf[USB_EP_DEFAULT_BUF_SIZE]  _AT_ 0xC580;
  42      =1  __no_init EXTERN xdata volatile uint8_t out2buf[USB_EP_DEFAULT_BUF_SIZE] _AT_ 0xC5C0;
  43      =1  __no_init EXTERN xdata volatile uint8_t in2buf[USB_EP_DEFAULT_BUF_SIZE]  _AT_ 0xC600;
  44      =1  __no_init EXTERN xdata volatile uint8_t out1buf[USB_EP_DEFAULT_BUF_SIZE] _AT_ 0xC640;
  45      =1  __no_init EXTERN xdata volatile uint8_t in1buf[USB_EP_DEFAULT_BUF_SIZE]  _AT_ 0xC680;
  46      =1  __no_init EXTERN xdata volatile uint8_t out0buf[USB_EP_DEFAULT_BUF_SIZE] _AT_ 0xC6C0;
  47      =1  __no_init EXTERN xdata volatile uint8_t in0buf[USB_EP_DEFAULT_BUF_SIZE]  _AT_ 0xC700;
  48      =1  __no_init EXTERN xdata volatile uint8_t out8data                         _AT_ 0xC760;
  49      =1  __no_init EXTERN xdata volatile uint8_t in8data                          _AT_ 0xC768;
  50      =1  __no_init EXTERN xdata volatile uint8_t out8bch                          _AT_ 0xC770;
  51      =1  __no_init EXTERN xdata volatile uint8_t out8bcl                          _AT_ 0xC771;
  52      =1  __no_init EXTERN xdata volatile uint8_t bout1addr                        _AT_ 0xC781;
  53      =1  __no_init EXTERN xdata volatile uint8_t bout2addr                        _AT_ 0xC782;
  54      =1  __no_init EXTERN xdata volatile uint8_t bout3addr                        _AT_ 0xC783;
  55      =1  __no_init EXTERN xdata volatile uint8_t bout4addr                        _AT_ 0xC784;
  56      =1  __no_init EXTERN xdata volatile uint8_t bout5addr                        _AT_ 0xC785;
  57      =1  __no_init EXTERN xdata volatile uint8_t binstaddr                        _AT_ 0xC788;
  58      =1  __no_init EXTERN xdata volatile uint8_t bin1addr                         _AT_ 0xC789;
  59      =1  __no_init EXTERN xdata volatile uint8_t bin2addr                         _AT_ 0xC78A;
  60      =1  __no_init EXTERN xdata volatile uint8_t bin3addr                         _AT_ 0xC78B;
  61      =1  __no_init EXTERN xdata volatile uint8_t bin4addr                         _AT_ 0xC78C;
  62      =1  __no_init EXTERN xdata volatile uint8_t bin5addr                         _AT_ 0xC78D;
  63      =1  __no_init EXTERN xdata volatile uint8_t isoerr                           _AT_ 0xC7A0;
  64      =1  __no_init EXTERN xdata volatile uint8_t zbcout                           _AT_ 0xC7A2;
  65      =1  __no_init EXTERN xdata volatile uint8_t ivec                             _AT_ 0xC7A8;
  66      =1  __no_init EXTERN xdata volatile uint8_t in_irq                           _AT_ 0xC7A9;
  67      =1  __no_init EXTERN xdata volatile uint8_t out_irq                          _AT_ 0xC7AA;
  68      =1  __no_init EXTERN xdata volatile uint8_t usbirq                           _AT_ 0xC7AB;
  69      =1  __no_init EXTERN xdata volatile uint8_t in_ien                           _AT_ 0xC7AC;
  70      =1  __no_init EXTERN xdata volatile uint8_t out_ien                          _AT_ 0xC7AD;
  71      =1  __no_init EXTERN xdata volatile uint8_t usbien                           _AT_ 0xC7AE;
  72      =1  __no_init EXTERN xdata volatile uint8_t usbbav                           _AT_ 0xC7AF;
  73      =1  __no_init EXTERN xdata volatile uint8_t ep0cs                            _AT_ 0xC7B4;
  74      =1  __no_init EXTERN xdata volatile uint8_t in0bc                            _AT_ 0xC7B5;
  75      =1  __no_init EXTERN xdata volatile uint8_t in1cs                            _AT_ 0xC7B6;
  76      =1  __no_init EXTERN xdata volatile uint8_t in1bc                            _AT_ 0xC7B7;
  77      =1  __no_init EXTERN xdata volatile uint8_t in2cs                            _AT_ 0xC7B8;
  78      =1  __no_init EXTERN xdata volatile uint8_t in2bc                            _AT_ 0xC7B9;
  79      =1  __no_init EXTERN xdata volatile uint8_t in3cs                            _AT_ 0xC7BA;
  80      =1  __no_init EXTERN xdata volatile uint8_t in3bc                            _AT_ 0xC7BB;
  81      =1  __no_init EXTERN xdata volatile uint8_t in4cs                            _AT_ 0xC7BC;
  82      =1  __no_init EXTERN xdata volatile uint8_t in4bc                            _AT_ 0xC7BD;
  83      =1  __no_init EXTERN xdata volatile uint8_t in5cs                            _AT_ 0xC7BE;
  84      =1  __no_init EXTERN xdata volatile uint8_t in5bc                            _AT_ 0xC7BF;
  85      =1  __no_init EXTERN xdata volatile uint8_t out0bc                           _AT_ 0xC7C5;
  86      =1  __no_init EXTERN xdata volatile uint8_t out1cs                           _AT_ 0xC7C6;
  87      =1  __no_init EXTERN xdata volatile uint8_t out1bc                           _AT_ 0xC7C7;
  88      =1  __no_init EXTERN xdata volatile uint8_t out2cs                           _AT_ 0xC7C8;
  89      =1  __no_init EXTERN xdata volatile uint8_t out2bc                           _AT_ 0xC7C9;
  90      =1  __no_init EXTERN xdata volatile uint8_t out3cs                           _AT_ 0xC7CA;
  91      =1  __no_init EXTERN xdata volatile uint8_t out3bc                           _AT_ 0xC7CB;
  92      =1  __no_init EXTERN xdata volatile uint8_t out4cs                           _AT_ 0xC7CC;
  93      =1  __no_init EXTERN xdata volatile uint8_t out4bc                           _AT_ 0xC7CD;
  94      =1  __no_init EXTERN xdata volatile uint8_t out5cs                           _AT_ 0xC7CE;
  95      =1  __no_init EXTERN xdata volatile uint8_t out5bc                           _AT_ 0xC7CF;
  96      =1  __no_init EXTERN xdata volatile uint8_t usbcs                            _AT_ 0xC7D6;
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 30  

  97      =1  __no_init EXTERN xdata volatile uint8_t togctl                           _AT_ 0xC7D7;
  98      =1  __no_init EXTERN xdata volatile uint8_t usbfrml                          _AT_ 0xC7D8;
  99      =1  __no_init EXTERN xdata volatile uint8_t usbfrmh                          _AT_ 0xC7D9;
 100      =1  __no_init EXTERN xdata volatile uint8_t fnaddr                           _AT_ 0xC7DB;
 101      =1  __no_init EXTERN xdata volatile uint8_t usbpair                          _AT_ 0xC7DD;
 102      =1  __no_init EXTERN xdata volatile uint8_t inbulkval                        _AT_ 0xC7DE;
 103      =1  __no_init EXTERN xdata volatile uint8_t outbulkval                       _AT_ 0xC7DF;
 104      =1  __no_init EXTERN xdata volatile uint8_t inisoval                         _AT_ 0xC7E0;
 105      =1  __no_init EXTERN xdata volatile uint8_t outisoval                        _AT_ 0xC7E1;
 106      =1  __no_init EXTERN xdata volatile uint8_t isostaddr                        _AT_ 0xC7E2;
 107      =1  __no_init EXTERN xdata volatile uint8_t isosize                          _AT_ 0xC7E3;
 108      =1  __no_init EXTERN xdata volatile uint8_t setupbuf[8]                      _AT_ 0xC7E8;
 109      =1  __no_init EXTERN xdata volatile uint8_t out8addr                         _AT_ 0xC7F0;
 110      =1  __no_init EXTERN xdata volatile uint8_t in8addr                          _AT_ 0xC7F8;
 111      =1  
 112      =1  #endif
  34          
  35          // Define formulas for jumping in the usb registry map based upon the endpoint number
  36          
  37          // Calculate control and status register location in USB-controller
  38          #define CALCULATE_CS_IN_PTR(ep) (uint8_t xdata*)(&in1cs + 2 * ((ep & 0x7f) - 1 ))
  39          #define CALCULATE_CS_OUT_PTR(ep) (uint8_t xdata*)(&out1cs + 2 * ( (ep & 0x7f) - 1 ))
  40          
  41          // Calculate byte count register location in USB-controller
  42          #define CALCULATE_BC_OUT_PTR(ep) (uint8_t xdata *)(&out0bc + (ep * 2 ))
  43          #define CALCULATE_BC_IN_PTR(ep) (uint8_t xdata *)(&in0bc + ((ep & 0x7f ) * 2))
  44          
  45          // Calculate buffer location in USB-controller
  46          #define CALCULATE_BUF_IN_PTR(ep) (uint8_t xdata *)(in0buf - (( ep & 0x7f) * 128))
  47          #define CALCULATE_BUF_OUT_PTR(ep) (uint8_t xdata *)(out0buf - (ep * 128 ))
  48          
  49          static packetizer_t i_packetizer;
  50          static hal_usb_cb_endpoint_t i_endpoint_in_isr[USB_ENDPOINT_IN_COUNT];
  51          static hal_usb_cb_endpoint_t i_endpoint_out_isr[USB_ENDPOINT_OUT_COUNT];
  52          
  53          static hal_usb_device_req req;
  54          hal_usb_t g_hal_usb;
  55          static uint8_t stall_data_size0;
  56          
  57          void hal_usb_init(bool usb_disconnect, hal_usb_cb_device_req_t device_req, hal_usb_cb_reset_t reset, hal_u
             -sb_cb_resume_t resume, hal_usb_cb_suspend_t suspend)
  58          {
  59   1        // Setup descriptors
  60   1        g_hal_usb.descs.dev = &g_usb_dev_desc;
  61   1        g_hal_usb.descs.conf = &g_usb_conf_desc;
  62   1        g_hal_usb.descs.string = &g_usb_string_desc;
  63   1      
  64   1        // This is for setting language American English (String descriptor 0 is an array of supported languages
             -)
  65   1        g_hal_usb.descs.string_zero[0] = 0x04;
  66   1        g_hal_usb.descs.string_zero[1] = 0x03;
  67   1        g_hal_usb.descs.string_zero[2] = 0x09;
  68   1        g_hal_usb.descs.string_zero[3] = 0x04;
  69   1      
  70   1        // Setup state information
  71   1        g_hal_usb.state = DEFAULT;
  72   1        g_hal_usb.bm_state = 0;
  73   1        stall_data_size0 = 0;
  74   1      
  75   1        // Setconfig configuration information
  76   1        g_hal_usb.current_config = 0;
  77   1        g_hal_usb.current_alt_interface = 0;
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 31  

  78   1      
  79   1        // Setup callbacks
  80   1        g_hal_usb.device_req = device_req;
  81   1        g_hal_usb.reset = reset;
  82   1        g_hal_usb.resume = resume;
  83   1        g_hal_usb.suspend = suspend;
  84   1      
  85   1        // Disconnect from USB-bus if we are in this routine from a power on and not a soft reset
  86   1        if(usb_disconnect)
  87   1        {
  88   2          usbcs |= 0x08; // disconnect
  89   2          delay_ms(50);
  90   2          usbcs &= ~(0x08); // connect
  91   2        }
  92   1      
  93   1        // Setup interrupts
  94   1        USBWU = 1; // USBWU is mapped to IEN1.3
  95   1        USB = 1; // USBIRQ is mapped to IEN1.4
  96   1      
  97   1        usbien = 0x1d; // ibnie -5 4 - uresir 3 - suspir, 0 - sudavir
  98   1      
  99   1        in_ien = 0x01;
 100   1        in_irq = 0x1f;
 101   1        out_ien = 0x01;
 102   1        out_irq = 0x1f;
 103   1      
 104   1        // Setup the USB RAM with some OK default values. Note that isochronos is not set up yet.
 105   1        bout1addr = 16;
 106   1        bout2addr = 32;
 107   1        bout3addr = 48;
 108   1        bout4addr = 64;
 109   1        bout5addr = 80;
 110   1      
 111   1        binstaddr = 0xc0;
 112   1        bin1addr = 16;
 113   1        bin2addr = 32;
 114   1        bin3addr = 48;
 115   1        bin4addr = 64;
 116   1        bin5addr = 80;
 117   1      
 118   1        // Set all endpoints to not valid (except EP0IN and EP0OUT)
 119   1        inbulkval = 0x01;
 120   1        outbulkval = 0x01;
 121   1        inisoval = 0x00;
 122   1        outisoval = 0x00;
 123   1      }
 124          
 125          void hal_usb_endpoint_stall(uint8_t ep_num, bool stall)
 126          {
 127   1        uint8_t temp;
 128   1        uint8_t xdata *cs_ptr;
 129   1      
 130   1        temp = 2 * ((ep_num & 0x7f) - 1);
 131   1      
 132   1        // Calculate register address
 133   1        if((ep_num & 0x80 ) == 0x80) // IN endpoints
 134   1        {
 135   2          // Calculate control and status register for IN endpoint
 136   2          cs_ptr = (uint8_t xdata*)(&in1cs + temp);
 137   2        }
 138   1        else // OUT endpoints
 139   1        {
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 32  

 140   2          // Calculate control and status register for OUT endpoint
 141   2          cs_ptr = (uint8_t xdata*)(&out1cs + temp);
 142   2        }
 143   1      
 144   1        if(stall == true)
 145   1        {
 146   2          // Set the stall bit
 147   2          *cs_ptr = 0x01;
 148   2        }
 149   1        else
 150   1        {
 151   2          // Clear the stall bit
 152   2          *cs_ptr = 0x00;
 153   2        }
 154   1      }
 155          
 156          uint8_t hal_usb_get_address()
 157          {
 158   1        return fnaddr;
 159   1      }
 160          
 161          void hal_usb_endpoint_config(uint8_t ep_num, uint8_t ep_size, hal_usb_cb_endpoint_t endpoint_isr)
 162          {
 163   1        uint8_t xdata *bc_ptr;
 164   1        uint8_t temp = (ep_num & 0x7f) - 1;
 165   1        uint8_t stemp = 1 << (ep_num & 0x7f);
 166   1      
 167   1        // Dummy use of variable to get rid of warning
 168   1        ep_size = 0;
 169   1      
 170   1        if((ep_num & 0x80 ) == 0x80) // MSB set indicates IN endpoint
 171   1        {
 172   2          i_endpoint_in_isr[temp] = endpoint_isr;
 173   2          if(endpoint_isr != NULL)
 174   2          {
 175   3            // Add the callback, enable the interrupt and validate the endpoint
 176   3            in_ien |= stemp; 
 177   3            inbulkval |= stemp;
 178   3          }
 179   2          else
 180   2          {
 181   3            // Remove the callback, disable the interrupt and invalidate the endpoint
 182   3            in_ien &= ~stemp;
 183   3            inbulkval &= ~stemp;
 184   3          }
 185   2        }
 186   1        else // OUT endpoint
 187   1        {
 188   2          i_endpoint_out_isr[temp] = endpoint_isr;
 189   2          if(endpoint_isr != NULL)
 190   2          {
 191   3            // Add the callback, enable the interrupt and validate the endpoint
 192   3            out_ien |= stemp;
 193   3            outbulkval |= stemp;
 194   3      
 195   3            // Have to write a dummy value to the OUTxBC register to get interrupts
 196   3            bc_ptr = CALCULATE_BC_OUT_PTR(ep_num);
 197   3            *bc_ptr = 0xff;
 198   3          }
 199   2          else
 200   2          {
 201   3            // Remove the callback, disable the interrupt and invalidate the endpoint
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 33  

 202   3            out_ien &= ~stemp;
 203   3            outbulkval &= ~stemp;
 204   3          }
 205   2        }
 206   1      }
 207          
 208          void hal_usb_wakeup()
 209          {
 210   1        // We can only issue a wakeup if the host has allowed us to do so
 211   1        if((g_hal_usb.bm_state & USB_BM_STATE_ALLOW_REMOTE_WAKEUP) == USB_BM_STATE_ALLOW_REMOTE_WAKEUP)
 212   1        {
 213   2          USBCON = 0x40;  // Wakeup the USB controller via remote pin
 214   2          delay_ms(1);    // Wait until the USB clock starts
 215   2          USBCON = 0x00;
 216   2        }
 217   1      }
 218          
 219          void hal_usb_reset()
 220          {
 221   1        SWRST = 1;  // Perform a hardware reset of the USB controller
 222   1      }
 223          
 224          hal_usb_state_t hal_usb_get_state()
 225          {
 226   1        return g_hal_usb.state;
 227   1      }
 228          
 229          void hal_usb_send_data(uint8_t ep_num, uint8_t* array, uint8_t count)
 230          {
 231   1        uint8_t i;
 232   1      
 233   1        uint8_t xdata *buf_ptr;
 234   1        uint8_t xdata *bc_ptr;
 235   1      
 236   1        // Calculate the buffer pointer and byte count pointer
 237   1        buf_ptr = CALCULATE_BUF_IN_PTR(ep_num);
 238   1        bc_ptr = CALCULATE_BC_IN_PTR(ep_num);
 239   1      
 240   1        // Copy the data into the USB controller
 241   1        for( i = 0; i < count; i++ )
 242   1        {
 243   2          buf_ptr[i] = array[i];
 244   2        }
 245   1      
 246   1        // Set the number of bytes we want to send to USB-host. This also trigger sending of data to USB-host.
 247   1        *bc_ptr = count;
 248   1      }
 249          
 250          void hal_usb_bus_disconnect()
 251          {
 252   1        usbcs |= 0x08; // disconnect
 253   1      }
 254          
 255          void hal_usb_bus_connect()
 256          {
 257   1        usbcs &= ~(0x08); // connect
 258   1      }
 259          
 260          void hal_usb_sleep()
 261          {
 262   1        USBSLP = 1;
 263   1      }
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 34  

 264           
 265          static void packetize(uint8_t *data_ptr, uint8_t data_size)
 266          {
 267   1        i_packetizer.data_ptr = data_ptr;
 268   1        i_packetizer.data_size = data_size;
 269   1        i_packetizer.pkt_size = g_hal_usb.descs.dev->bMaxPacketSize0;
 270   1      }
 271          
 272          // This routine is called by functions that shall send their first packet and when the EP0IN interrupt is 
             -set
 273          static void packetizer_isr_ep0_in(void) 
 274          {
 275   1        uint8_t size, i;
 276   1      
 277   1        // We are getting a ep0in interupt when the host send ACK and do not have any more data to send
 278   1        if(i_packetizer.data_size == 0)
 279   1        {        
 280   2          if (stall_data_size0 == 1)
 281   2          {
 282   3              USB_EP0_DSTALL();
 283   3          }
 284   2          else
 285   2          {
 286   3              stall_data_size0 = 1;
 287   3              in0bc = 0;
 288   3              USB_EP0_HSNAK();
 289   3          }       
 290   2          return;
 291   2        }
 292   1      
 293   1        size = MIN(i_packetizer.data_size, i_packetizer.pkt_size);
 294   1      
 295   1        // Copy data to the USB-controller buffer
 296   1        for(i = 0; i < size; i++)
 297   1        {
 298   2          in0buf[i] = i_packetizer.data_ptr[i];
 299   2        }
 300   1      
 301   1        if (size < i_packetizer.pkt_size)
 302   1          stall_data_size0 = 1;
 303   1        // Tell the USB-controller how many bytes to send
 304   1        // If a IN is received from host after this the USB-controller will send the data
 305   1        in0bc = size;
 306   1      
 307   1        // Update the packetizer data
 308   1        i_packetizer.data_ptr += size;
 309   1        i_packetizer.data_size -= size;
 310   1      
 311   1        return;
 312   1      }
 313          
 314          /** This function processes the response from the callback */
 315          static void usb_process_dev_req_cb_response(void)
 316          {
 317   1        uint8_t *data_ptr;
 318   1        uint8_t data_size;
 319   1        hal_usb_dev_req_resp_t ret = g_hal_usb.device_req(&req, &data_ptr, &data_size);
 320   1      
 321   1        switch(ret)
 322   1        {
 323   2          case DATA:
 324   2            packetize((uint8_t *)data_ptr, MIN(req.wLength, data_size));
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 35  

 325   2            packetizer_isr_ep0_in();
 326   2            break;
 327   2          case NO_RESPONSE:
 328   2            break;
 329   2          case EMPTY_RESPONSE:
 330   2          case NAK:
 331   2            USB_EP0_HSNAK();
 332   2            break;
 333   2          case ACK:
 334   2            out0bc = 0xff;
 335   2            break;
 336   2          case STALL:
 337   2          default:
 338   2            USB_EP0_STALL();
 339   2            break;
 340   2          }
 341   1      }
 342          
 343          static void usb_process_get_status(void)
 344          {
 345   1        uint8_t xdata *ptr;
 346   1      
 347   1        if(g_hal_usb.state == ADDRESSED)
 348   1        {
 349   2          if(req.wIndex != 0x00)
 350   2          {
 351   3              USB_EP0_STALL();
 352   3          }
 353   2          else
 354   2          {
 355   3            in0buf[0] = in0buf[1] = 
 356   3              ((g_hal_usb.descs.conf->conf.bmAttributes & 0x40 ) >> 6); // D0 - 0: bus powered, 1: self powered
 357   3            in0bc = 0x02;
 358   3          }
 359   2        }
 360   1        else if(g_hal_usb.state == CONFIGURED)
 361   1        {
 362   2          in0buf[1] = 0x00;
 363   2          switch(req.bmRequestType)
 364   2          {
 365   3            case 0x80: // Device
 366   3              if((g_hal_usb.bm_state & USB_BM_STATE_ALLOW_REMOTE_WAKEUP ) == USB_BM_STATE_ALLOW_REMOTE_WAKEUP)
 367   3              {
 368   4                  in0buf[0] = 0x02;
 369   4              }
 370   3              else
 371   3              {
 372   4                  in0buf[0] = 0x00;
 373   4              }
 374   3      
 375   3              in0buf[0] |= ((g_hal_usb.descs.conf->conf.bmAttributes & 0x40 ) >> 6); // D0 - 0: bus powered, 1: 
             -self powered
 376   3              in0bc = 0x02;
 377   3              break;
 378   3            case 0x81: // Interface
 379   3              in0buf[0] = 0x00;
 380   3              in0bc = 0x02;
 381   3              break;
 382   3            case 0x82: // Endpoint
 383   3              if((req.wIndex & 0x80) == 0x80) // IN endpoints
 384   3              {
 385   4                ptr = CALCULATE_CS_IN_PTR(req.wIndex);
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 36  

 386   4              }
 387   3              else
 388   3              {
 389   4                ptr = CALCULATE_CS_OUT_PTR(req.wIndex);
 390   4              }
 391   3      
 392   3              in0buf[0] = *ptr & 0x01;
 393   3              in0bc = 0x02;
 394   3              break;
 395   3            default:
 396   3              USB_EP0_STALL();
 397   3              break;
 398   3          } // switch(req.bmRequestType) --end--
 399   2        }
 400   1        else
 401   1        {
 402   2          // We should not be in this state
 403   2          USB_EP0_STALL();
 404   2        }
 405   1      }
 406          
 407          static void usb_process_get_descriptor(void)
 408          {
 409   1        // Switch on descriptor type
 410   1        switch(req.wValueMsb)
 411   1        {
 412   2          case USB_DESC_DEVICE:
 413   2            packetize((uint8_t *)g_hal_usb.descs.dev,
 414   2            MIN(req.wLength, sizeof(hal_usb_dev_desc_t)));
 415   2            packetizer_isr_ep0_in();
 416   2            break;
 417   2          case USB_DESC_CONFIGURATION:
 418   2            // For now we just support one configuration. The asked configuration is stored in LSB(wValue).
 419   2            packetize((uint8_t *)g_hal_usb.descs.conf,
 420   2            MIN(req.wLength, sizeof(usb_conf_desc_templ_t)));
 421   2            packetizer_isr_ep0_in();
 422   2            break;
 423   2          case USB_DESC_STRING:
 424   2            // For now we just support english as string descriptor language.
 425   2            if(req.wValueLsb == 0x00)
 426   2            {
 427   3              packetize(g_hal_usb.descs.string_zero, MIN(req.wLength, sizeof(g_hal_usb.descs.string_zero)));
 428   3              packetizer_isr_ep0_in();
 429   3            }
 430   2            else
 431   2            {
 432   3              if((req.wValueLsb - 1 ) < USB_STRING_DESC_COUNT)
 433   3              {
 434   4                packetize((uint8_t *)(g_hal_usb.descs.string->idx[req.wValueLsb-1]),
 435   4                MIN(req.wLength, g_hal_usb.descs.string->idx[req.wValueLsb-1][0]));
 436   4                packetizer_isr_ep0_in();
 437   4              }
 438   3              else
 439   3              {
 440   4                USB_EP0_STALL();
 441   4              }
 442   3            }
 443   2            break;
 444   2          case USB_DESC_INTERFACE:
 445   2          case USB_DESC_ENDPOINT:
 446   2          case USB_DESC_DEVICE_QUAL:
 447   2          case USB_DESC_OTHER_SPEED_CONF:
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 37  

 448   2          case USB_DESC_INTERFACE_POWER:
 449   2            USB_EP0_STALL();
 450   2            break;
 451   2          default:
 452   2            usb_process_dev_req_cb_response();
 453   2            break;
 454   2        }
 455   1      }
 456          
 457          static void isr_sudav(void)
 458          {
 459   1        // Parsing the request into request structure
 460   1        req.bmRequestType = setupbuf[0];
 461   1        req.bRequest = setupbuf[1];
 462   1        req.wValueLsb = setupbuf[2];
 463   1        req.wValueMsb = setupbuf[3];
 464   1        req.wIndex = setupbuf[4];
 465   1        req.wLength = setupbuf[6];
 466   1        if (setupbuf[7] > 0)
 467   1        {
 468   2          req.wLength = 0xff; // We truncate packets requests longer then 255 bytes
 469   2        }
 470   1      
 471   1        // bmRequestType = 0 00 xxxxx : Data transfer direction: Host-to-device Type: Standard
 472   1        if((req.bmRequestType & 0x60) == 0x00)
 473   1        {
 474   2          switch(req.bRequest)
 475   2          {
 476   3            case USB_REQ_GET_DESCRIPTOR:
 477   3              usb_process_get_descriptor();
 478   3              break;
 479   3            case USB_REQ_GET_STATUS:
 480   3              usb_process_get_status();
 481   3              break;           
 482   3            case USB_REQ_CLEAR_FEATURE:
 483   3            case USB_REQ_SET_FEATURE: 
 484   3              switch(req.bmRequestType)
 485   3              {
 486   4                case 0x00: // Device
 487   4                  if(req.wValueLsb == USB_DEVICE_REMOTE_WAKEUP)
 488   4                  {
 489   5                    if (req.bRequest == USB_REQ_CLEAR_FEATURE) 
 490   5                      g_hal_usb.bm_state &= ~(USB_BM_STATE_ALLOW_REMOTE_WAKEUP);
 491   5                    else
 492   5                      g_hal_usb.bm_state |= USB_BM_STATE_ALLOW_REMOTE_WAKEUP;
 493   5                    USB_EP0_HSNAK();
 494   5                  }
 495   4                  else
 496   4                  {
 497   5                    USB_EP0_STALL();
 498   5                  }
 499   4                  break;
 500   4      
 501   4                case 0x02: // Endpoint
 502   4                  if(req.wValueLsb == USB_ENDPOINT_HALT)
 503   4                  {
 504   5                    if (req.bRequest == USB_REQ_CLEAR_FEATURE) 
 505   5                      hal_usb_endpoint_stall(req.wIndex, false);
 506   5                    else
 507   5                      hal_usb_endpoint_stall(req.wIndex, true);
 508   5                    USB_EP0_HSNAK();
 509   5                  }
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 38  

 510   4                  else 
 511   4                  {
 512   5                      USB_EP0_STALL();
 513   5                  }
 514   4                  break;
 515   4                case 0x01: // Interface
 516   4                default:
 517   4                  USB_EP0_STALL();
 518   4                  break;
 519   4              }
 520   3              break;
 521   3      
 522   3            case USB_REQ_SET_ADDRESS:
 523   3              g_hal_usb.state = ADDRESSED;
 524   3              g_hal_usb.current_config = 0x00;
 525   3              break;
 526   3            case USB_REQ_GET_CONFIGURATION:
 527   3              switch(g_hal_usb.state)
 528   3              {
 529   4                case ADDRESSED:
 530   4                  in0buf[0] = 0x00;
 531   4                  in0bc = 0x01;
 532   4                  break;
 533   4                case CONFIGURED:
 534   4                  in0buf[0] = g_hal_usb.current_config;
 535   4                  in0bc = 0x01;
 536   4                  break;
 537   4                default:
 538   4                  USB_EP0_STALL();
 539   4                  break;
 540   4              }
 541   3              break;
 542   3            case USB_REQ_SET_CONFIGURATION:
 543   3              switch(req.wValueLsb)
 544   3              {
 545   4                case 0x00:
 546   4                  g_hal_usb.state = ADDRESSED;
 547   4                  g_hal_usb.current_config = 0x00;
 548   4                  USB_EP0_HSNAK();
 549   4                  break;
 550   4                case 0x01:
 551   4                  g_hal_usb.state = CONFIGURED;
 552   4                  g_hal_usb.bm_state |= USB_BM_STATE_CONFIGURED;
 553   4                  g_hal_usb.current_config = 0x01;
 554   4                  USB_EP0_HSNAK();
 555   4                  break;
 556   4                default:
 557   4                  USB_EP0_STALL();
 558   4                  break;
 559   4              }
 560   3              break;
 561   3            case USB_REQ_GET_INTERFACE: // GET_INTERFACE
 562   3              in0buf[0] = g_hal_usb.current_alt_interface;
 563   3              in0bc = 0x01;
 564   3              break;
 565   3            case USB_REQ_SET_DESCRIPTOR:
 566   3            case USB_REQ_SET_INTERFACE: // SET_INTERFACE (We do not support this)
 567   3            case USB_REQ_SYNCH_FRAME:   // SYNCH_FRAME (We do not support this)
 568   3            default:
 569   3             USB_EP0_STALL();
 570   3             break;
 571   3          };
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 39  

 572   2        } 
 573   1        // bmRequestType = 0 01 xxxxx : Data transfer direction: Host-to-device, Type: Class
 574   1        else if((req.bmRequestType & 0x60 ) == 0x20)  // Class request
 575   1        {
 576   2          if(req.wLength != 0 && ((req.bmRequestType & 0x80) == 0x00))
 577   2          {
 578   3            // If there is a OUT-transaction associated with the Control-Transfer-Write we call the callback
 579   3            // when the OUT-transaction is finished. Note that this function do not handle several out transacti
             -ons.
 580   3            out0bc = 0xff;
 581   3          }
 582   2          else
 583   2          {
 584   3            usb_process_dev_req_cb_response();
 585   3          }
 586   2          // Call the callback function. Data to be sent back to the host is store by the callback in data_ptr a
             -nd the size in data_size.
 587   2        } 
 588   1        else  // Unknown request type
 589   1        {
 590   2          USB_EP0_STALL();
 591   2        }
 592   1      }
 593          
 594          static void isr_suspend(void)
 595          {
 596   1        uint8_t allow_remote_wu = 0;
 597   1        g_hal_usb.bm_state &= ~(USB_BM_STATE_HOST_WU); // We clear the flag that indicates that the host awoke t
             -he MCU via USB here
 598   1      
 599   1        if( g_hal_usb.state == CONFIGURED )
 600   1        {
 601   2          if( ( g_hal_usb.bm_state & USB_BM_STATE_ALLOW_REMOTE_WAKEUP ) == USB_BM_STATE_ALLOW_REMOTE_WAKEUP )
 602   2          {
 603   3            allow_remote_wu = 1;
 604   3          }
 605   2        }
 606   1      
 607   1        g_hal_usb.state = SUSPENDED;
 608   1      
 609   1        if( g_hal_usb.suspend != NULL )
 610   1        {
 611   2          g_hal_usb.suspend(allow_remote_wu);
 612   2        }
 613   1      }
 614          
 615          static void isr_usbreset(void)
 616          {
 617   1        g_hal_usb.state = DEFAULT;
 618   1        g_hal_usb.current_config = 0;
 619   1        g_hal_usb.current_alt_interface = 0;
 620   1        g_hal_usb.bm_state = 0;
 621   1        if( g_hal_usb.reset != NULL ) g_hal_usb.reset();
 622   1      }
 623          
 624          
 625          USB_WU_ISR() // address: 0x005b
 626          {
 627   1      #define ICH4
 628   1        #ifdef ICH4
 629   1        uint8_t t;
 630   1        #endif
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 40  

 631   1      
 632   1        // Check if the wakeup source is the pin to the USB controller
 633   1        // If it is by the pin to the USB controller we want to start
 634   1        // a remote wakeup
 635   1        if( ( usbcs & 0x80 ) == 0x80 )
 636   1        {
 637   2          // Reset the wakesrc indicator
 638   2          usbcs = 0x80;
 639   2      
 640   2          // If we are allowed to perform a remote wakeup do that
 641   2          if( ( g_hal_usb.bm_state & USB_BM_STATE_ALLOW_REMOTE_WAKEUP ) == USB_BM_STATE_ALLOW_REMOTE_WAKEUP )
 642   2          {
 643   3        #ifdef ICH4
 644   3            // Force the J state on the USB lines
 645   3            usbcs |= 0x02;
 646   3      
 647   3            // Typical 5.4us delay
 648   3            _nop_();
 649   3            _nop_();
 650   3      
 651   3            t = usbcs;
 652   3      
 653   3            // Stop J state on the USB lines
 654   3            t &= ~0x02;
 655   3      
 656   3            // Signal remote resume
 657   3            t |= 0x01;
 658   3      
 659   3            // We have to set this register in one operation to avoid
 660   3            // idle state is restored between the forced J and resume state
 661   3            usbcs = t;
 662   3      #else
                    usbcs |= 0x01;  // Turn on the resume signal on the USB bus
              #endif
 665   3            delay_ms(7); //.1.7.7 Resume: The remote wakeup device must hold the resume signaling for at 
 666   3                          // least 1 ms but for no more than 15ms
 667   3      
 668   3            usbcs &= ~0x01; // Turn off the resume signal on the USB bus
 669   3          }
 670   2        }
 671   1        else 
 672   1        {
 673   2          // We are awoken by the bus
 674   2          g_hal_usb.bm_state |= USB_BM_STATE_HOST_WU;
 675   2        }
 676   1      
 677   1        if((g_hal_usb.bm_state & USB_BM_STATE_CONFIGURED ) == USB_BM_STATE_CONFIGURED)
 678   1        {
 679   2          g_hal_usb.state = CONFIGURED;
 680   2        }
 681   1        else
 682   1        {
 683   2          g_hal_usb.state = DEFAULT;
 684   2        }
 685   1      
 686   1        // Call resume callback
 687   1        g_hal_usb.resume();
 688   1      }
 689          
 690          // This function processes the response from the EP callback
 691          static void usb_process_ep_response(uint8_t ret, uint8_t xdata* cs_ptr, uint8_t xdata* bc_ptr)
 692          {
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 41  

 693   1        if( ret == 0xff ) // Clear the OUTx busy flag enabling reception of the next OUT from USB-host
 694   1        {
 695   2          *bc_ptr = 0xff;
 696   2        }
 697   1        else if( ( ret & 0x80 ) == 0x80 )  // STALL
 698   1        {
 699   2          *cs_ptr = 0x01;
 700   2        }
 701   1        else if( ( ret & 0x60 ) == 0x60 ) // NAK
 702   1        {
 703   2          *cs_ptr = 0x02;
 704   2        }
 705   1        else if( ret == 0 ) // Zero length data
 706   1        {
 707   2          *bc_ptr = 0;
 708   2        }
 709   1        else
 710   1        {
 711   2          *bc_ptr = ret;
 712   2        }
 713   1      }
 714          
 715          USB_ISR()
 716          {
 717   1        uint8_t ep;
 718   1        uint8_t ret;
 719   1        uint8_t xdata *cs_ptr;
 720   1        uint8_t xdata *buf_ptr;
 721   1        uint8_t xdata *bc_ptr;
 722   1      
 723   1        switch(ivec)
 724   1        {
 725   2          case INT_SUDAV:
 726   2            usbirq = 0x01;
 727   2            isr_sudav();
 728   2            break;
 729   2          case INT_SOF:
 730   2            usbirq = 0x02;
 731   2            break;
 732   2          case INT_SUTOK:
 733   2            usbirq = 0x04;
 734   2            i_packetizer.data_ptr = NULL;
 735   2            i_packetizer.data_size = 0;
 736   2            i_packetizer.pkt_size = 0;
 737   2            stall_data_size0 = 0;
 738   2            break;
 739   2          case INT_SUSPEND:
 740   2            usbirq = 0x08;
 741   2            isr_suspend();
 742   2            break;
 743   2          case INT_USBRESET:
 744   2            usbirq = 0x10;
 745   2            isr_usbreset();
 746   2            break;
 747   2          case INT_EP0IN:
 748   2            in_irq = 0x01;
 749   2            packetizer_isr_ep0_in();
 750   2            break;
 751   2          case INT_EP0OUT:
 752   2            out_irq = 0x01;
 753   2            i_packetizer.data_size = 0;
 754   2            usb_process_dev_req_cb_response();
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 42  

 755   2            break;
 756   2            case INT_EP1IN:
 757   2            case INT_EP2IN:
 758   2            case INT_EP3IN:
 759   2            case INT_EP4IN:
 760   2            case INT_EP5IN:
 761   2              // Calculate IN endpoint number
 762   2              ep = (ivec - INT_EP0IN ) >> 3;// INT_EP2IN - INT_EP1IN == 8 ;   
 763   2              // Clear interrupt 
 764   2              in_irq = ( 1 << ep );
 765   2      
 766   2              cs_ptr = CALCULATE_CS_IN_PTR(ep);
 767   2              buf_ptr = CALCULATE_BUF_IN_PTR(ep);
 768   2              bc_ptr = CALCULATE_BC_IN_PTR(ep);
 769   2          
 770   2              // Call registered callback
 771   2             // ret = i_endpoint_in_isr[ep - 1](buf_ptr, bc_ptr);
 772   2              usb_process_ep_response(0x60, cs_ptr, bc_ptr);
 773   2              break;
 774   2            case INT_EP1OUT:
 775   2            case INT_EP2OUT:
 776   2            case INT_EP3OUT:
 777   2            case INT_EP4OUT:
 778   2            case INT_EP5OUT:
 779   2              // Calculate OUT endpoint number
 780   2              ep = (ivec - INT_EP0OUT) >> 3;          // INT_EP2OUT - INT_EP1OUT == 8
 781   2      
 782   2              // Clear interrupt
 783   2              out_irq = ( 1 << ep );
 784   2              
 785   2              cs_ptr = CALCULATE_CS_OUT_PTR(ep);
 786   2              buf_ptr = CALCULATE_BUF_OUT_PTR(ep);
 787   2              bc_ptr = CALCULATE_BC_OUT_PTR(ep);
 788   2      
 789   2              // Call registered callback
 790   2              // ret = (i_endpoint_out_isr[ep - 1])(buf_ptr, bc_ptr);
 791   2                      ret = ep_1_out_cb(buf_ptr,bc_ptr);
 792   2              usb_process_ep_response(ret, cs_ptr, bc_ptr);
 793   2              break;
 794   2          default:
 795   2            break;
 796   2        };
 797   1      }
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 43  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _hal_usb_init (BEGIN)
                                           ; SOURCE LINE # 57
0000 900000      R     MOV     DPTR,#device_req
0003 EB                MOV     A,R3
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EA                MOV     A,R2
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 E9                MOV     A,R1
000A F0                MOVX    @DPTR,A
;---- Variable 'usb_disconnect' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 58
                                           ; SOURCE LINE # 60
000B 900000      R     MOV     DPTR,#g_hal_usb
000E 74FF              MOV     A,#0FFH
0010 F0                MOVX    @DPTR,A
0011 A3                INC     DPTR
0012 7400        E     MOV     A,#HIGH g_usb_dev_desc
0014 F0                MOVX    @DPTR,A
0015 A3                INC     DPTR
0016 7400        E     MOV     A,#LOW g_usb_dev_desc
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 61
0019 A3                INC     DPTR
001A 74FF              MOV     A,#0FFH
001C F0                MOVX    @DPTR,A
001D A3                INC     DPTR
001E 7400        E     MOV     A,#HIGH g_usb_conf_desc
0020 F0                MOVX    @DPTR,A
0021 A3                INC     DPTR
0022 7400        E     MOV     A,#LOW g_usb_conf_desc
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 62
0025 A3                INC     DPTR
0026 74FF              MOV     A,#0FFH
0028 F0                MOVX    @DPTR,A
0029 A3                INC     DPTR
002A 7400        E     MOV     A,#HIGH g_usb_string_desc
002C F0                MOVX    @DPTR,A
002D A3                INC     DPTR
002E 7400        E     MOV     A,#LOW g_usb_string_desc
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 65
0031 A3                INC     DPTR
0032 7404              MOV     A,#04H
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 66
0035 A3                INC     DPTR
0036 14                DEC     A
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 67
0038 A3                INC     DPTR
0039 7409              MOV     A,#09H
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 68
003C A3                INC     DPTR
003D 7404              MOV     A,#04H
003F F0                MOVX    @DPTR,A
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 44  

                                           ; SOURCE LINE # 71
0040 900000      R     MOV     DPTR,#g_hal_usb+010H
0043 7402              MOV     A,#02H
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 72
0046 E4                CLR     A
0047 900000      R     MOV     DPTR,#g_hal_usb+0DH
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 73
004B 900000      R     MOV     DPTR,#stall_data_size0
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 76
004F 900000      R     MOV     DPTR,#g_hal_usb+0EH
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 77
0053 A3                INC     DPTR
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 80
0055 900000      R     MOV     DPTR,#device_req
0058 E0                MOVX    A,@DPTR
0059 F9                MOV     R1,A
005A A3                INC     DPTR
005B E0                MOVX    A,@DPTR
005C FA                MOV     R2,A
005D A3                INC     DPTR
005E E0                MOVX    A,@DPTR
005F 900000      R     MOV     DPTR,#g_hal_usb+011H
0062 C9                XCH     A,R1
0063 F0                MOVX    @DPTR,A
0064 A3                INC     DPTR
0065 EA                MOV     A,R2
0066 F0                MOVX    @DPTR,A
0067 A3                INC     DPTR
0068 E9                MOV     A,R1
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 81
006A 900000      R     MOV     DPTR,#reset
006D E0                MOVX    A,@DPTR
006E F9                MOV     R1,A
006F A3                INC     DPTR
0070 E0                MOVX    A,@DPTR
0071 FA                MOV     R2,A
0072 A3                INC     DPTR
0073 E0                MOVX    A,@DPTR
0074 900000      R     MOV     DPTR,#g_hal_usb+014H
0077 C9                XCH     A,R1
0078 F0                MOVX    @DPTR,A
0079 A3                INC     DPTR
007A EA                MOV     A,R2
007B F0                MOVX    @DPTR,A
007C A3                INC     DPTR
007D E9                MOV     A,R1
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 82
007F 900000      R     MOV     DPTR,#resume
0082 E0                MOVX    A,@DPTR
0083 F9                MOV     R1,A
0084 A3                INC     DPTR
0085 E0                MOVX    A,@DPTR
0086 FA                MOV     R2,A
0087 A3                INC     DPTR
0088 E0                MOVX    A,@DPTR
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 45  

0089 900000      R     MOV     DPTR,#g_hal_usb+017H
008C C9                XCH     A,R1
008D F0                MOVX    @DPTR,A
008E A3                INC     DPTR
008F EA                MOV     A,R2
0090 F0                MOVX    @DPTR,A
0091 A3                INC     DPTR
0092 E9                MOV     A,R1
0093 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 83
0094 900000      R     MOV     DPTR,#suspend
0097 E0                MOVX    A,@DPTR
0098 F9                MOV     R1,A
0099 A3                INC     DPTR
009A E0                MOVX    A,@DPTR
009B FA                MOV     R2,A
009C A3                INC     DPTR
009D E0                MOVX    A,@DPTR
009E 900000      R     MOV     DPTR,#g_hal_usb+01AH
00A1 C9                XCH     A,R1
00A2 F0                MOVX    @DPTR,A
00A3 A3                INC     DPTR
00A4 EA                MOV     A,R2
00A5 F0                MOVX    @DPTR,A
00A6 A3                INC     DPTR
00A7 E9                MOV     A,R1
00A8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 86
00A9 EF                MOV     A,R7
00AA 6015              JZ      ?C0001
                                           ; SOURCE LINE # 87
                                           ; SOURCE LINE # 88
00AC 90C7D6            MOV     DPTR,#usbcs
00AF E0                MOVX    A,@DPTR
00B0 4408              ORL     A,#08H
00B2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 89
00B3 7F32              MOV     R7,#032H
00B5 7E00              MOV     R6,#00H
00B7 120000      E     LCALL   _delay_ms
                                           ; SOURCE LINE # 90
00BA 90C7D6            MOV     DPTR,#usbcs
00BD E0                MOVX    A,@DPTR
00BE 54F7              ANL     A,#0F7H
00C0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 91
00C1         ?C0001:
                                           ; SOURCE LINE # 94
00C1 D2BB              SETB    USBWU
                                           ; SOURCE LINE # 95
00C3 D2BC              SETB    USB
                                           ; SOURCE LINE # 97
00C5 90C7AE            MOV     DPTR,#usbien
00C8 741D              MOV     A,#01DH
00CA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 99
00CB 90C7AC            MOV     DPTR,#in_ien
00CE 7401              MOV     A,#01H
00D0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 100
00D1 90C7A9            MOV     DPTR,#in_irq
00D4 741F              MOV     A,#01FH
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 46  

00D6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 101
00D7 90C7AD            MOV     DPTR,#out_ien
00DA 7401              MOV     A,#01H
00DC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 102
00DD 90C7AA            MOV     DPTR,#out_irq
00E0 741F              MOV     A,#01FH
00E2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 105
00E3 90C781            MOV     DPTR,#bout1addr
00E6 7410              MOV     A,#010H
00E8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 106
00E9 A3                INC     DPTR
00EA 7420              MOV     A,#020H
00EC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 107
00ED A3                INC     DPTR
00EE 7430              MOV     A,#030H
00F0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 108
00F1 A3                INC     DPTR
00F2 7440              MOV     A,#040H
00F4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 109
00F5 A3                INC     DPTR
00F6 7450              MOV     A,#050H
00F8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 111
00F9 90C788            MOV     DPTR,#binstaddr
00FC 74C0              MOV     A,#0C0H
00FE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 112
00FF A3                INC     DPTR
0100 7410              MOV     A,#010H
0102 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 113
0103 A3                INC     DPTR
0104 7420              MOV     A,#020H
0106 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 114
0107 A3                INC     DPTR
0108 7430              MOV     A,#030H
010A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 115
010B A3                INC     DPTR
010C 7440              MOV     A,#040H
010E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 116
010F A3                INC     DPTR
0110 7450              MOV     A,#050H
0112 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 119
0113 90C7DE            MOV     DPTR,#inbulkval
0116 7401              MOV     A,#01H
0118 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 120
0119 A3                INC     DPTR
011A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 121
011B E4                CLR     A
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 47  

011C A3                INC     DPTR
011D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 122
011E A3                INC     DPTR
011F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 123
0120 22                RET     
             ; FUNCTION _hal_usb_init (END)

             ; FUNCTION _hal_usb_endpoint_stall (BEGIN)
                                           ; SOURCE LINE # 125
;---- Variable 'ep_num' assigned to Register 'R7' ----
;---- Variable 'stall' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 126
                                           ; SOURCE LINE # 130
0000 EF                MOV     A,R7
0001 547F              ANL     A,#07FH
0003 14                DEC     A
0004 25E0              ADD     A,ACC
0006 FE                MOV     R6,A
;---- Variable 'temp' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 133
0007 EF                MOV     A,R7
0008 30E70B            JNB     ACC.7,?C0003
                                           ; SOURCE LINE # 134
                                           ; SOURCE LINE # 136
000B EE                MOV     A,R6
000C 7E00              MOV     R6,#00H
000E 24B6              ADD     A,#LOW in1cs
0010 F9                MOV     R1,A
0011 EE                MOV     A,R6
0012 34C7              ADDC    A,#HIGH in1cs
                                           ; SOURCE LINE # 137
0014 800B              SJMP    ?C0243
0016         ?C0003:
                                           ; SOURCE LINE # 139
                                           ; SOURCE LINE # 141
0016 AF06              MOV     R7,AR6
0018 7E00              MOV     R6,#00H
001A 74C6              MOV     A,#LOW out1cs
001C 2F                ADD     A,R7
001D F9                MOV     R1,A
001E EE                MOV     A,R6
001F 34C7              ADDC    A,#HIGH out1cs
0021         ?C0243:
0021 AF01              MOV     R7,AR1
0023 900000      R     MOV     DPTR,#cs_ptr
0026 F0                MOVX    @DPTR,A
0027 A3                INC     DPTR
0028 EF                MOV     A,R7
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 142
002A         ?C0004:
                                           ; SOURCE LINE # 144
002A ED                MOV     A,R5
002B 900000      R     MOV     DPTR,#cs_ptr
002E B4010C            CJNE    A,#01H,?C0005
                                           ; SOURCE LINE # 145
                                           ; SOURCE LINE # 147
0031 E0                MOVX    A,@DPTR
0032 FE                MOV     R6,A
0033 A3                INC     DPTR
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 48  

0034 E0                MOVX    A,@DPTR
0035 F582              MOV     DPL,A
0037 8E83              MOV     DPH,R6
0039 7401              MOV     A,#01H
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 148
003C 22                RET     
003D         ?C0005:
                                           ; SOURCE LINE # 150
                                           ; SOURCE LINE # 152
003D E0                MOVX    A,@DPTR
003E FE                MOV     R6,A
003F A3                INC     DPTR
0040 E0                MOVX    A,@DPTR
0041 F582              MOV     DPL,A
0043 8E83              MOV     DPH,R6
0045 E4                CLR     A
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 153
                                           ; SOURCE LINE # 154
0047         ?C0007:
0047 22                RET     
             ; FUNCTION _hal_usb_endpoint_stall (END)

             ; FUNCTION hal_usb_get_address (BEGIN)
                                           ; SOURCE LINE # 156
                                           ; SOURCE LINE # 157
                                           ; SOURCE LINE # 158
0000 90C7DB            MOV     DPTR,#fnaddr
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 159
0005         ?C0008:
0005 22                RET     
             ; FUNCTION hal_usb_get_address (END)

             ; FUNCTION _hal_usb_endpoint_config (BEGIN)
                                           ; SOURCE LINE # 161
0000 900000      R     MOV     DPTR,#endpoint_isr
0003 EB                MOV     A,R3
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EA                MOV     A,R2
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 E9                MOV     A,R1
000A F0                MOVX    @DPTR,A
;---- Variable 'ep_num' assigned to Register 'R4' ----
000B AC07              MOV     R4,AR7
;---- Variable 'ep_size' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 162
                                           ; SOURCE LINE # 164
000D EC                MOV     A,R4
000E 547F              ANL     A,#07FH
0010 FF                MOV     R7,A
0011 14                DEC     A
0012 FE                MOV     R6,A
;---- Variable 'temp' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 165
0013 7401              MOV     A,#01H
0015 A807              MOV     R0,AR7
0017 08                INC     R0
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 49  

0018 8002              SJMP    ?C0232
001A         ?C0231:
001A C3                CLR     C
001B 33                RLC     A
001C         ?C0232:
001C D8FC              DJNZ    R0,?C0231
001E 900000      R     MOV     DPTR,#stemp
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 168
                                           ; SOURCE LINE # 170
0022 EC                MOV     A,R4
0023 30E759            JNB     ACC.7,?C0009
                                           ; SOURCE LINE # 171
                                           ; SOURCE LINE # 172
0026 900000      R     MOV     DPTR,#endpoint_isr
0029 E0                MOVX    A,@DPTR
002A FB                MOV     R3,A
002B A3                INC     DPTR
002C E0                MOVX    A,@DPTR
002D FA                MOV     R2,A
002E A3                INC     DPTR
002F E0                MOVX    A,@DPTR
0030 F9                MOV     R1,A
0031 EE                MOV     A,R6
0032 75F003            MOV     B,#03H
0035 A4                MUL     AB
0036 2400        R     ADD     A,#LOW i_endpoint_in_isr
0038 F582              MOV     DPL,A
003A E4                CLR     A
003B 3400        R     ADDC    A,#HIGH i_endpoint_in_isr
003D F583              MOV     DPH,A
003F EB                MOV     A,R3
0040 F0                MOVX    @DPTR,A
0041 A3                INC     DPTR
0042 EA                MOV     A,R2
0043 F0                MOVX    @DPTR,A
0044 A3                INC     DPTR
0045 E9                MOV     A,R1
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 173
0047 900000      R     MOV     DPTR,#endpoint_isr
004A E0                MOVX    A,@DPTR
004B FB                MOV     R3,A
004C A3                INC     DPTR
004D E0                MOVX    A,@DPTR
004E FA                MOV     R2,A
004F A3                INC     DPTR
0050 E0                MOVX    A,@DPTR
0051 4A                ORL     A,R2
0052 4B                ORL     A,R3
0053 90C7AC            MOV     DPTR,#in_ien
0056 6014              JZ      ?C0010
                                           ; SOURCE LINE # 174
                                           ; SOURCE LINE # 176
0058 E0                MOVX    A,@DPTR
0059 FF                MOV     R7,A
005A 900000      R     MOV     DPTR,#stemp
005D E0                MOVX    A,@DPTR
005E FE                MOV     R6,A
005F EF                MOV     A,R7
0060 4E                ORL     A,R6
0061 90C7AC            MOV     DPTR,#in_ien
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 50  

0064 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 177
0065 90C7DE            MOV     DPTR,#inbulkval
0068 E0                MOVX    A,@DPTR
0069 4E                ORL     A,R6
006A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 178
006B 22                RET     
006C         ?C0010:
                                           ; SOURCE LINE # 180
                                           ; SOURCE LINE # 182
006C E0                MOVX    A,@DPTR
006D FF                MOV     R7,A
006E 900000      R     MOV     DPTR,#stemp
0071 E0                MOVX    A,@DPTR
0072 F4                CPL     A
0073 FE                MOV     R6,A
0074 EF                MOV     A,R7
0075 5E                ANL     A,R6
0076 90C7AC            MOV     DPTR,#in_ien
0079 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 183
007A 90C7DE            MOV     DPTR,#inbulkval
                                           ; SOURCE LINE # 184
                                           ; SOURCE LINE # 185
007D 806A              SJMP    ?C0244
007F         ?C0009:
                                           ; SOURCE LINE # 187
                                           ; SOURCE LINE # 188
007F 900000      R     MOV     DPTR,#endpoint_isr
0082 E0                MOVX    A,@DPTR
0083 FB                MOV     R3,A
0084 A3                INC     DPTR
0085 E0                MOVX    A,@DPTR
0086 FA                MOV     R2,A
0087 A3                INC     DPTR
0088 E0                MOVX    A,@DPTR
0089 F9                MOV     R1,A
008A EE                MOV     A,R6
008B 75F003            MOV     B,#03H
008E A4                MUL     AB
008F 2400        R     ADD     A,#LOW i_endpoint_out_isr
0091 F582              MOV     DPL,A
0093 E4                CLR     A
0094 3400        R     ADDC    A,#HIGH i_endpoint_out_isr
0096 F583              MOV     DPH,A
0098 EB                MOV     A,R3
0099 F0                MOVX    @DPTR,A
009A A3                INC     DPTR
009B EA                MOV     A,R2
009C F0                MOVX    @DPTR,A
009D A3                INC     DPTR
009E E9                MOV     A,R1
009F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 189
00A0 900000      R     MOV     DPTR,#endpoint_isr
00A3 E0                MOVX    A,@DPTR
00A4 FB                MOV     R3,A
00A5 A3                INC     DPTR
00A6 E0                MOVX    A,@DPTR
00A7 FA                MOV     R2,A
00A8 A3                INC     DPTR
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 51  

00A9 E0                MOVX    A,@DPTR
00AA 4A                ORL     A,R2
00AB 4B                ORL     A,R3
00AC 90C7AD            MOV     DPTR,#out_ien
00AF 6027              JZ      ?C0013
                                           ; SOURCE LINE # 190
                                           ; SOURCE LINE # 192
00B1 E0                MOVX    A,@DPTR
00B2 FF                MOV     R7,A
00B3 900000      R     MOV     DPTR,#stemp
00B6 E0                MOVX    A,@DPTR
00B7 FE                MOV     R6,A
00B8 EF                MOV     A,R7
00B9 4E                ORL     A,R6
00BA 90C7AD            MOV     DPTR,#out_ien
00BD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 193
00BE 90C7DF            MOV     DPTR,#outbulkval
00C1 E0                MOVX    A,@DPTR
00C2 4E                ORL     A,R6
00C3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 196
00C4 EC                MOV     A,R4
00C5 75F002            MOV     B,#02H
00C8 A4                MUL     AB
00C9 24C5              ADD     A,#LOW out0bc
00CB F9                MOV     R1,A
00CC 74C7              MOV     A,#HIGH out0bc
00CE 35F0              ADDC    A,B
;---- Variable 'bc_ptr' assigned to Register 'DPTR' ----
00D0 8982              MOV     DPL,R1
00D2 F583              MOV     DPH,A
                                           ; SOURCE LINE # 197
00D4 74FF              MOV     A,#0FFH
00D6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 198
00D7 22                RET     
00D8         ?C0013:
                                           ; SOURCE LINE # 200
                                           ; SOURCE LINE # 202
00D8 E0                MOVX    A,@DPTR
00D9 FF                MOV     R7,A
00DA 900000      R     MOV     DPTR,#stemp
00DD E0                MOVX    A,@DPTR
00DE F4                CPL     A
00DF FE                MOV     R6,A
00E0 EF                MOV     A,R7
00E1 5E                ANL     A,R6
00E2 90C7AD            MOV     DPTR,#out_ien
00E5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 203
00E6 90C7DF            MOV     DPTR,#outbulkval
00E9         ?C0244:
00E9 E0                MOVX    A,@DPTR
00EA 5E                ANL     A,R6
00EB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
                                           ; SOURCE LINE # 205
                                           ; SOURCE LINE # 206
00EC         ?C0015:
00EC 22                RET     
             ; FUNCTION _hal_usb_endpoint_config (END)
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 52  


             ; FUNCTION hal_usb_wakeup (BEGIN)
                                           ; SOURCE LINE # 208
                                           ; SOURCE LINE # 209
                                           ; SOURCE LINE # 211
0000 900000      R     MOV     DPTR,#g_hal_usb+0DH
0003 E0                MOVX    A,@DPTR
0004 30E10D            JNB     ACC.1,?C0017
                                           ; SOURCE LINE # 212
                                           ; SOURCE LINE # 213
0007 75A040            MOV     USBCON,#040H
                                           ; SOURCE LINE # 214
000A 7F01              MOV     R7,#01H
000C 7E00              MOV     R6,#00H
000E 120000      E     LCALL   _delay_ms
                                           ; SOURCE LINE # 215
0011 E4                CLR     A
0012 F5A0              MOV     USBCON,A
                                           ; SOURCE LINE # 216
                                           ; SOURCE LINE # 217
0014         ?C0017:
0014 22                RET     
             ; FUNCTION hal_usb_wakeup (END)

             ; FUNCTION hal_usb_reset (BEGIN)
                                           ; SOURCE LINE # 219
                                           ; SOURCE LINE # 220
                                           ; SOURCE LINE # 221
0000 D2A7              SETB    SWRST
                                           ; SOURCE LINE # 222
0002 22                RET     
             ; FUNCTION hal_usb_reset (END)

             ; FUNCTION hal_usb_get_state (BEGIN)
                                           ; SOURCE LINE # 224
                                           ; SOURCE LINE # 225
                                           ; SOURCE LINE # 226
0000 900000      R     MOV     DPTR,#g_hal_usb+010H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 227
0005         ?C0019:
0005 22                RET     
             ; FUNCTION hal_usb_get_state (END)

             ; FUNCTION _hal_usb_send_data (BEGIN)
                                           ; SOURCE LINE # 229
0000 900000      R     MOV     DPTR,#array
0003 EB                MOV     A,R3
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EA                MOV     A,R2
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 E9                MOV     A,R1
000A F0                MOVX    @DPTR,A
000B 900000      R     MOV     DPTR,#ep_num
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 230
                                           ; SOURCE LINE # 237
0010 547F              ANL     A,#07FH
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 53  

0012 75F080            MOV     B,#080H
0015 A4                MUL     AB
0016 FF                MOV     R7,A
0017 C3                CLR     C
0018 7400              MOV     A,#LOW in0buf
001A 9F                SUBB    A,R7
001B F9                MOV     R1,A
001C 74C7              MOV     A,#HIGH in0buf
001E 95F0              SUBB    A,B
0020 AF01              MOV     R7,AR1
0022 900000      R     MOV     DPTR,#buf_ptr
0025 F0                MOVX    @DPTR,A
0026 A3                INC     DPTR
0027 EF                MOV     A,R7
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 238
0029 900000      R     MOV     DPTR,#ep_num
002C E0                MOVX    A,@DPTR
002D 547F              ANL     A,#07FH
002F 75F002            MOV     B,#02H
0032 A4                MUL     AB
0033 24B5              ADD     A,#LOW in0bc
0035 F9                MOV     R1,A
0036 74C7              MOV     A,#HIGH in0bc
0038 35F0              ADDC    A,B
003A AF01              MOV     R7,AR1
003C 900000      R     MOV     DPTR,#bc_ptr
003F F0                MOVX    @DPTR,A
0040 A3                INC     DPTR
0041 EF                MOV     A,R7
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 241
0043 E4                CLR     A
0044 900000      R     MOV     DPTR,#i
0047 F0                MOVX    @DPTR,A
0048         ?C0020:
0048 900000      R     MOV     DPTR,#count
004B E0                MOVX    A,@DPTR
004C FF                MOV     R7,A
004D A3                INC     DPTR
004E E0                MOVX    A,@DPTR
004F FE                MOV     R6,A
0050 C3                CLR     C
0051 9F                SUBB    A,R7
0052 502C              JNC     ?C0021
                                           ; SOURCE LINE # 242
                                           ; SOURCE LINE # 243
0054 900000      R     MOV     DPTR,#array
0057 E0                MOVX    A,@DPTR
0058 FB                MOV     R3,A
0059 A3                INC     DPTR
005A E0                MOVX    A,@DPTR
005B FA                MOV     R2,A
005C A3                INC     DPTR
005D E0                MOVX    A,@DPTR
005E F9                MOV     R1,A
005F 8E82              MOV     DPL,R6
0061 758300            MOV     DPH,#00H
0064 120000      E     LCALL   ?C?CLDOPTR
0067 FF                MOV     R7,A
0068 900000      R     MOV     DPTR,#buf_ptr
006B E0                MOVX    A,@DPTR
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 54  

006C FC                MOV     R4,A
006D A3                INC     DPTR
006E E0                MOVX    A,@DPTR
006F 2E                ADD     A,R6
0070 F582              MOV     DPL,A
0072 E4                CLR     A
0073 3C                ADDC    A,R4
0074 F583              MOV     DPH,A
0076 EF                MOV     A,R7
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 244
0078 900000      R     MOV     DPTR,#i
007B E0                MOVX    A,@DPTR
007C 04                INC     A
007D F0                MOVX    @DPTR,A
007E 80C8              SJMP    ?C0020
0080         ?C0021:
                                           ; SOURCE LINE # 247
0080 900000      R     MOV     DPTR,#count
0083 E0                MOVX    A,@DPTR
0084 FF                MOV     R7,A
0085 900000      R     MOV     DPTR,#bc_ptr
0088 E0                MOVX    A,@DPTR
0089 FC                MOV     R4,A
008A A3                INC     DPTR
008B E0                MOVX    A,@DPTR
008C F582              MOV     DPL,A
008E 8C83              MOV     DPH,R4
0090 EF                MOV     A,R7
0091 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 248
0092 22                RET     
             ; FUNCTION _hal_usb_send_data (END)

             ; FUNCTION hal_usb_bus_disconnect (BEGIN)
                                           ; SOURCE LINE # 250
                                           ; SOURCE LINE # 251
                                           ; SOURCE LINE # 252
0000 90C7D6            MOV     DPTR,#usbcs
0003 E0                MOVX    A,@DPTR
0004 4408              ORL     A,#08H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 253
0007 22                RET     
             ; FUNCTION hal_usb_bus_disconnect (END)

             ; FUNCTION hal_usb_bus_connect (BEGIN)
                                           ; SOURCE LINE # 255
                                           ; SOURCE LINE # 256
                                           ; SOURCE LINE # 257
0000 90C7D6            MOV     DPTR,#usbcs
0003 E0                MOVX    A,@DPTR
0004 54F7              ANL     A,#0F7H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 258
0007 22                RET     
             ; FUNCTION hal_usb_bus_connect (END)

             ; FUNCTION hal_usb_sleep (BEGIN)
                                           ; SOURCE LINE # 260
                                           ; SOURCE LINE # 261
                                           ; SOURCE LINE # 262
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 55  

0000 75D901            MOV     USBSLP,#01H
                                           ; SOURCE LINE # 263
0003 22                RET     
             ; FUNCTION hal_usb_sleep (END)

             ; FUNCTION _packetize (BEGIN)
                                           ; SOURCE LINE # 265
;---- Variable 'data_size' assigned to Register 'R5' ----
;---- Variable 'data_ptr' assigned to Register 'R1/R2/R3' ----
                                           ; SOURCE LINE # 266
                                           ; SOURCE LINE # 267
0000 900000      R     MOV     DPTR,#i_packetizer
0003 EB                MOV     A,R3
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EA                MOV     A,R2
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 E9                MOV     A,R1
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 268
000B A3                INC     DPTR
000C ED                MOV     A,R5
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 269
000E 900000      R     MOV     DPTR,#g_hal_usb
0011 E0                MOVX    A,@DPTR
0012 FB                MOV     R3,A
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 FA                MOV     R2,A
0016 A3                INC     DPTR
0017 E0                MOVX    A,@DPTR
0018 F9                MOV     R1,A
0019 900007            MOV     DPTR,#07H
001C 120000      E     LCALL   ?C?CLDOPTR
001F 900000      R     MOV     DPTR,#i_packetizer+04H
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 270
0023 22                RET     
             ; FUNCTION _packetize (END)

             ; FUNCTION packetizer_isr_ep0_in (BEGIN)
                                           ; SOURCE LINE # 273
                                           ; SOURCE LINE # 274
                                           ; SOURCE LINE # 278
0000 900000      R     MOV     DPTR,#i_packetizer+03H
0003 E0                MOVX    A,@DPTR
0004 FD                MOV     R5,A
0005 7021              JNZ     ?C0028
                                           ; SOURCE LINE # 279
                                           ; SOURCE LINE # 280
0007 900000      R     MOV     DPTR,#stall_data_size0
000A E0                MOVX    A,@DPTR
000B B40108            CJNE    A,#01H,?C0029
                                           ; SOURCE LINE # 281
                                           ; SOURCE LINE # 282
000E 90C7B4            MOV     DPTR,#ep0cs
0011 E0                MOVX    A,@DPTR
0012 4410              ORL     A,#010H
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 283
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 56  

0015 22                RET     
0016         ?C0029:
                                           ; SOURCE LINE # 285
                                           ; SOURCE LINE # 286
0016 900000      R     MOV     DPTR,#stall_data_size0
0019 7401              MOV     A,#01H
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 287
001C E4                CLR     A
001D 90C7B5            MOV     DPTR,#in0bc
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 288
0021 90C7B4            MOV     DPTR,#ep0cs
0024 7402              MOV     A,#02H
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 289
0027 22                RET     
                                           ; SOURCE LINE # 291
0028         ?C0028:
                                           ; SOURCE LINE # 293
0028 900000      R     MOV     DPTR,#i_packetizer+04H
002B E0                MOVX    A,@DPTR
002C FF                MOV     R7,A
002D ED                MOV     A,R5
002E C3                CLR     C
002F 9F                SUBB    A,R7
0030 5007              JNC     ?C0038
0032 900000      R     MOV     DPTR,#i_packetizer+03H
0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
0037 8000              SJMP    ?C0039
0039         ?C0038:
0039         ?C0039:
;---- Variable 'size' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 296
;---- Variable 'i' assigned to Register 'R6' ----
0039 E4                CLR     A
003A FE                MOV     R6,A
003B         ?C0040:
003B EE                MOV     A,R6
003C C3                CLR     C
003D 9F                SUBB    A,R7
003E 5023              JNC     ?C0041
                                           ; SOURCE LINE # 297
                                           ; SOURCE LINE # 298
0040 900000      R     MOV     DPTR,#i_packetizer
0043 E0                MOVX    A,@DPTR
0044 FB                MOV     R3,A
0045 A3                INC     DPTR
0046 E0                MOVX    A,@DPTR
0047 FA                MOV     R2,A
0048 A3                INC     DPTR
0049 E0                MOVX    A,@DPTR
004A F9                MOV     R1,A
004B 8E82              MOV     DPL,R6
004D 758300            MOV     DPH,#00H
0050 120000      E     LCALL   ?C?CLDOPTR
0053 FD                MOV     R5,A
0054 7400              MOV     A,#LOW in0buf
0056 2E                ADD     A,R6
0057 F582              MOV     DPL,A
0059 E4                CLR     A
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 57  

005A 34C7              ADDC    A,#HIGH in0buf
005C F583              MOV     DPH,A
005E ED                MOV     A,R5
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 299
0060 0E                INC     R6
0061 80D8              SJMP    ?C0040
0063         ?C0041:
                                           ; SOURCE LINE # 301
0063 900000      R     MOV     DPTR,#i_packetizer+04H
0066 E0                MOVX    A,@DPTR
0067 FE                MOV     R6,A
0068 EF                MOV     A,R7
0069 C3                CLR     C
006A 9E                SUBB    A,R6
006B 5006              JNC     ?C0043
                                           ; SOURCE LINE # 302
006D 900000      R     MOV     DPTR,#stall_data_size0
0070 7401              MOV     A,#01H
0072 F0                MOVX    @DPTR,A
0073         ?C0043:
                                           ; SOURCE LINE # 305
0073 90C7B5            MOV     DPTR,#in0bc
0076 EF                MOV     A,R7
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 308
0078 FD                MOV     R5,A
0079 900000      R     MOV     DPTR,#i_packetizer+01H
007C E4                CLR     A
007D 8DF0              MOV     B,R5
007F 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 309
0082 900000      R     MOV     DPTR,#i_packetizer+03H
0085 E0                MOVX    A,@DPTR
0086 C3                CLR     C
0087 9F                SUBB    A,R7
0088 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 312
0089         ?C0037:
0089 22                RET     
             ; FUNCTION packetizer_isr_ep0_in (END)

             ; FUNCTION usb_process_dev_req_cb_response (BEGIN)
                                           ; SOURCE LINE # 315
                                           ; SOURCE LINE # 316
                                           ; SOURCE LINE # 319
0000 7B01              MOV     R3,#01H
0002 7A00        R     MOV     R2,#HIGH data_size
0004 7900        R     MOV     R1,#LOW data_size
0006 90FFFD            MOV     DPTR,#0FFFDH
0009 120000      E     LCALL   ?C?ADDXBP
000C EB                MOV     A,R3
000D F0                MOVX    @DPTR,A
000E A3                INC     DPTR
000F EA                MOV     A,R2
0010 F0                MOVX    @DPTR,A
0011 A3                INC     DPTR
0012 E9                MOV     A,R1
0013 F0                MOVX    @DPTR,A
0014 7B01              MOV     R3,#01H
0016 7A00        R     MOV     R2,#HIGH data_ptr
0018 7900        R     MOV     R1,#LOW data_ptr
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 58  

001A 90FFFD            MOV     DPTR,#0FFFDH
001D 120000      E     LCALL   ?C?ADDXBP
0020 EB                MOV     A,R3
0021 F0                MOVX    @DPTR,A
0022 A3                INC     DPTR
0023 EA                MOV     A,R2
0024 F0                MOVX    @DPTR,A
0025 A3                INC     DPTR
0026 E9                MOV     A,R1
0027 F0                MOVX    @DPTR,A
0028 7B01              MOV     R3,#01H
002A 7A00        R     MOV     R2,#HIGH req
002C 7900        R     MOV     R1,#LOW req
002E C002              PUSH    AR2
0030 900000      R     MOV     DPTR,#g_hal_usb+011H
0033 A3                INC     DPTR
0034 E0                MOVX    A,@DPTR
0035 FA                MOV     R2,A
0036 A3                INC     DPTR
0037 E0                MOVX    A,@DPTR
0038 F582              MOV     DPL,A
003A 8A83              MOV     DPH,R2
003C D002              POP     AR2
003E 120000      E     LCALL   ?C?ICALL2
;---- Variable 'ret' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 321
0041 EF                MOV     A,R7
0042 14                DEC     A
0043 6030              JZ      ?C0053
0045 14                DEC     A
0046 6034              JZ      ?C0054
0048 14                DEC     A
0049 603E              JZ      ?C0060
004B 24FE              ADD     A,#0FEH
004D 6026              JZ      ?C0053
004F 04                INC     A
0050 7031              JNZ     ?C0059
                                           ; SOURCE LINE # 322
                                           ; SOURCE LINE # 323
0052         ?C0045:
                                           ; SOURCE LINE # 324
0052 900000      R     MOV     DPTR,#data_ptr
0055 E0                MOVX    A,@DPTR
0056 FB                MOV     R3,A
0057 A3                INC     DPTR
0058 E0                MOVX    A,@DPTR
0059 FA                MOV     R2,A
005A A3                INC     DPTR
005B E0                MOVX    A,@DPTR
005C F9                MOV     R1,A
005D A3                INC     DPTR
005E E0                MOVX    A,@DPTR
005F FF                MOV     R7,A
0060 900000      R     MOV     DPTR,#req+05H
0063 E0                MOVX    A,@DPTR
0064 FE                MOV     R6,A
0065 C3                CLR     C
0066 9F                SUBB    A,R7
0067 5004              JNC     ?C0046
0069 AD06              MOV     R5,AR6
006B 8002              SJMP    ?C0047
006D         ?C0046:
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 59  

006D AD07              MOV     R5,AR7
006F         ?C0047:
006F 120000      R     LCALL   _packetize
                                           ; SOURCE LINE # 325
0072 020000      R     LJMP    packetizer_isr_ep0_in
                                           ; SOURCE LINE # 326
                                           ; SOURCE LINE # 327
                                           ; SOURCE LINE # 328
                                           ; SOURCE LINE # 329
                                           ; SOURCE LINE # 330
0075         ?C0053:
                                           ; SOURCE LINE # 331
0075 90C7B4            MOV     DPTR,#ep0cs
0078 7402              MOV     A,#02H
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 332
007B 22                RET     
                                           ; SOURCE LINE # 333
007C         ?C0054:
                                           ; SOURCE LINE # 334
007C 90C7C5            MOV     DPTR,#out0bc
007F 74FF              MOV     A,#0FFH
0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 335
0082 22                RET     
                                           ; SOURCE LINE # 336
                                           ; SOURCE LINE # 337
0083         ?C0059:
                                           ; SOURCE LINE # 338
0083 90C7B4            MOV     DPTR,#ep0cs
0086 7411              MOV     A,#011H
0088 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 339
                                           ; SOURCE LINE # 340
                                           ; SOURCE LINE # 341
0089         ?C0060:
0089 22                RET     
             ; FUNCTION usb_process_dev_req_cb_response (END)

             ; FUNCTION usb_process_get_status (BEGIN)
                                           ; SOURCE LINE # 343
                                           ; SOURCE LINE # 344
                                           ; SOURCE LINE # 347
0000 900000      R     MOV     DPTR,#g_hal_usb+010H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 6403              XRL     A,#03H
0007 7028              JNZ     ?C0061
                                           ; SOURCE LINE # 348
                                           ; SOURCE LINE # 349
0009 900000      R     MOV     DPTR,#req+04H
000C E0                MOVX    A,@DPTR
000D 6003              JZ      ?C0062
                                           ; SOURCE LINE # 350
                                           ; SOURCE LINE # 351
                                           ; SOURCE LINE # 352
000F 020000      R     LJMP    ?C0250
0012         ?C0062:
                                           ; SOURCE LINE # 354
                                           ; SOURCE LINE # 355
0012 900000      R     MOV     DPTR,#g_hal_usb+03H
0015 E0                MOVX    A,@DPTR
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 60  

0016 FB                MOV     R3,A
0017 A3                INC     DPTR
0018 E0                MOVX    A,@DPTR
0019 FA                MOV     R2,A
001A A3                INC     DPTR
001B E0                MOVX    A,@DPTR
001C F9                MOV     R1,A
001D 900007            MOV     DPTR,#07H
0020 120000      E     LCALL   ?C?CLDOPTR
0023 5440              ANL     A,#040H
0025 C4                SWAP    A
0026 13                RRC     A
0027 13                RRC     A
0028 5403              ANL     A,#03H
002A 90C701            MOV     DPTR,#in0buf+01H
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 357
                                           ; SOURCE LINE # 358
                                           ; SOURCE LINE # 359
002E 020000      R     LJMP    ?C0249
0031         ?C0061:
                                           ; SOURCE LINE # 360
0031 EF                MOV     A,R7
0032 6404              XRL     A,#04H
0034 6003              JZ      $ + 5H
0036 020000      R     LJMP    ?C0084
                                           ; SOURCE LINE # 361
                                           ; SOURCE LINE # 362
0039 90C701            MOV     DPTR,#in0buf+01H
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 363
003D 900000      R     MOV     DPTR,#req
0040 E0                MOVX    A,@DPTR
0041 247F              ADD     A,#07FH
0043 6040              JZ      ?C0073
0045 14                DEC     A
0046 6040              JZ      ?C0074
0048 2402              ADD     A,#02H
004A 6003              JZ      $ + 5H
004C 020000      R     LJMP    ?C0080
                                           ; SOURCE LINE # 364
                                           ; SOURCE LINE # 365
004F         ?C0070:
                                           ; SOURCE LINE # 366
004F 900000      R     MOV     DPTR,#g_hal_usb+0DH
0052 E0                MOVX    A,@DPTR
0053 30E108            JNB     ACC.1,?C0071
                                           ; SOURCE LINE # 367
                                           ; SOURCE LINE # 368
0056 90C700            MOV     DPTR,#in0buf
0059 7402              MOV     A,#02H
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 369
005C 8005              SJMP    ?C0072
005E         ?C0071:
                                           ; SOURCE LINE # 371
                                           ; SOURCE LINE # 372
005E E4                CLR     A
005F 90C700            MOV     DPTR,#in0buf
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 373
0063         ?C0072:
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 61  

                                           ; SOURCE LINE # 375
0063 90C700            MOV     DPTR,#in0buf
0066 E0                MOVX    A,@DPTR
0067 FF                MOV     R7,A
0068 900000      R     MOV     DPTR,#g_hal_usb+03H
006B E0                MOVX    A,@DPTR
006C FB                MOV     R3,A
006D A3                INC     DPTR
006E E0                MOVX    A,@DPTR
006F FA                MOV     R2,A
0070 A3                INC     DPTR
0071 E0                MOVX    A,@DPTR
0072 F9                MOV     R1,A
0073 900007            MOV     DPTR,#07H
0076 120000      E     LCALL   ?C?CLDOPTR
0079 5440              ANL     A,#040H
007B C4                SWAP    A
007C 13                RRC     A
007D 13                RRC     A
007E 5403              ANL     A,#03H
0080 FE                MOV     R6,A
0081 EF                MOV     A,R7
0082 4E                ORL     A,R6
0083         ?C0247:
                                           ; SOURCE LINE # 376
                                           ; SOURCE LINE # 377
0083 803F              SJMP    ?C0249
                                           ; SOURCE LINE # 378
0085         ?C0073:
                                           ; SOURCE LINE # 379
0085 E4                CLR     A
0086         ?C0248:
                                           ; SOURCE LINE # 380
                                           ; SOURCE LINE # 381
0086 803C              SJMP    ?C0249
                                           ; SOURCE LINE # 382
0088         ?C0074:
                                           ; SOURCE LINE # 383
0088 900000      R     MOV     DPTR,#req+04H
008B E0                MOVX    A,@DPTR
008C 30E70D            JNB     ACC.7,?C0075
                                           ; SOURCE LINE # 384
                                           ; SOURCE LINE # 385
008F 547F              ANL     A,#07FH
0091 75F002            MOV     B,#02H
0094 A4                MUL     AB
0095 24B4              ADD     A,#LOW in1cs+0FFFEH
0097 F9                MOV     R1,A
0098 74C7              MOV     A,#HIGH in1cs+0FFFEH
                                           ; SOURCE LINE # 386
009A 800F              SJMP    ?C0245
009C         ?C0075:
                                           ; SOURCE LINE # 388
                                           ; SOURCE LINE # 389
009C 900000      R     MOV     DPTR,#req+04H
009F E0                MOVX    A,@DPTR
00A0 547F              ANL     A,#07FH
00A2 75F002            MOV     B,#02H
00A5 A4                MUL     AB
00A6 24C4              ADD     A,#LOW out1cs+0FFFEH
00A8 F9                MOV     R1,A
00A9 74C7              MOV     A,#HIGH out1cs+0FFFEH
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 62  

00AB         ?C0245:
00AB 35F0              ADDC    A,B
00AD AF01              MOV     R7,AR1
00AF 900000      R     MOV     DPTR,#ptr
00B2 F0                MOVX    @DPTR,A
00B3 A3                INC     DPTR
00B4 EF                MOV     A,R7
00B5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 390
00B6         ?C0076:
                                           ; SOURCE LINE # 392
00B6 900000      R     MOV     DPTR,#ptr
00B9 E0                MOVX    A,@DPTR
00BA FE                MOV     R6,A
00BB A3                INC     DPTR
00BC E0                MOVX    A,@DPTR
00BD F582              MOV     DPL,A
00BF 8E83              MOV     DPH,R6
00C1 E0                MOVX    A,@DPTR
00C2 5401              ANL     A,#01H
00C4         ?C0249:
00C4 90C700            MOV     DPTR,#in0buf
00C7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 393
00C8 90C7B5            MOV     DPTR,#in0bc
00CB 7402              MOV     A,#02H
00CD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 394
00CE 22                RET     
                                           ; SOURCE LINE # 395
00CF         ?C0080:
                                           ; SOURCE LINE # 396
00CF         ?C0246:
                                           ; SOURCE LINE # 397
00CF 8000              SJMP    ?C0250
                                           ; SOURCE LINE # 398
                                           ; SOURCE LINE # 399
                                           ; SOURCE LINE # 401
00D1         ?C0084:
                                           ; SOURCE LINE # 403
00D1         ?C0250:
00D1 90C7B4            MOV     DPTR,#ep0cs
00D4 7411              MOV     A,#011H
00D6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 404
                                           ; SOURCE LINE # 405
00D7         ?C0085:
00D7 22                RET     
             ; FUNCTION usb_process_get_status (END)

             ; FUNCTION usb_process_get_descriptor (BEGIN)
                                           ; SOURCE LINE # 407
                                           ; SOURCE LINE # 408
                                           ; SOURCE LINE # 410
0000 900000      R     MOV     DPTR,#req+02H
0003 E0                MOVX    A,@DPTR
0004 24FE              ADD     A,#0FEH
0006 6030              JZ      ?C0090
0008 14                DEC     A
0009 604B              JZ      ?C0093
000B 24FA              ADD     A,#0FAH
000D 4003              JC      $ + 5H
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 63  

000F 020000      R     LJMP    ?C0112
0012 2408              ADD     A,#08H
0014 6003              JZ      $ + 5H
0016 020000      R     LJMP    ?C0113
                                           ; SOURCE LINE # 411
                                           ; SOURCE LINE # 412
0019         ?C0087:
                                           ; SOURCE LINE # 413
0019 900000      R     MOV     DPTR,#g_hal_usb
001C E0                MOVX    A,@DPTR
001D FB                MOV     R3,A
001E A3                INC     DPTR
001F E0                MOVX    A,@DPTR
0020 FA                MOV     R2,A
0021 A3                INC     DPTR
0022 E0                MOVX    A,@DPTR
0023 F9                MOV     R1,A
0024 900000      R     MOV     DPTR,#req+05H
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 C3                CLR     C
002A 9412              SUBB    A,#012H
002C 5005              JNC     ?C0088
002E AD07              MOV     R5,AR7
0030 020000      R     LJMP    ?C0253
0033         ?C0088:
0033 7D12              MOV     R5,#012H
0035         ?C0089:
                                           ; SOURCE LINE # 415
                                           ; SOURCE LINE # 416
0035 020000      R     LJMP    ?C0253
                                           ; SOURCE LINE # 417
0038         ?C0090:
                                           ; SOURCE LINE # 419
0038 900000      R     MOV     DPTR,#g_hal_usb+03H
003B E0                MOVX    A,@DPTR
003C FB                MOV     R3,A
003D A3                INC     DPTR
003E E0                MOVX    A,@DPTR
003F FA                MOV     R2,A
0040 A3                INC     DPTR
0041 E0                MOVX    A,@DPTR
0042 F9                MOV     R1,A
0043 900000      R     MOV     DPTR,#req+05H
0046 E0                MOVX    A,@DPTR
0047 FF                MOV     R7,A
0048 C3                CLR     C
0049 9420              SUBB    A,#020H
004B 5004              JNC     ?C0091
004D AD07              MOV     R5,AR7
004F 8002              SJMP    ?C0092
0051         ?C0091:
0051 7D20              MOV     R5,#020H
0053         ?C0092:
0053         ?C0251:
                                           ; SOURCE LINE # 421
                                           ; SOURCE LINE # 422
0053 020000      R     LJMP    ?C0253
                                           ; SOURCE LINE # 423
0056         ?C0093:
                                           ; SOURCE LINE # 425
0056 900000      R     MOV     DPTR,#req+03H
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 64  

0059 E0                MOVX    A,@DPTR
005A FC                MOV     R4,A
005B 7018              JNZ     ?C0094
                                           ; SOURCE LINE # 426
                                           ; SOURCE LINE # 427
005D 7B01              MOV     R3,#01H
005F 7A00        R     MOV     R2,#HIGH g_hal_usb+09H
0061 7900        R     MOV     R1,#LOW g_hal_usb+09H
0063 900000      R     MOV     DPTR,#req+05H
0066 E0                MOVX    A,@DPTR
0067 FF                MOV     R7,A
0068 C3                CLR     C
0069 9404              SUBB    A,#04H
006B 5004              JNC     ?C0095
006D AD07              MOV     R5,AR7
006F 8002              SJMP    ?C0096
0071         ?C0095:
0071 7D04              MOV     R5,#04H
0073         ?C0096:
0073         ?C0252:
                                           ; SOURCE LINE # 428
                                           ; SOURCE LINE # 429
0073 8063              SJMP    ?C0253
0075         ?C0094:
                                           ; SOURCE LINE # 431
                                           ; SOURCE LINE # 432
0075 EC                MOV     A,R4
0076 14                DEC     A
0077 C3                CLR     C
0078 9402              SUBB    A,#02H
007A 5062              JNC     ?C0254
                                           ; SOURCE LINE # 433
                                           ; SOURCE LINE # 434
007C 900000      R     MOV     DPTR,#g_hal_usb+06H
007F E0                MOVX    A,@DPTR
0080 FB                MOV     R3,A
0081 A3                INC     DPTR
0082 E0                MOVX    A,@DPTR
0083 FA                MOV     R2,A
0084 A3                INC     DPTR
0085 E0                MOVX    A,@DPTR
0086 F9                MOV     R1,A
0087 900000      R     MOV     DPTR,#req+03H
008A E0                MOVX    A,@DPTR
008B FF                MOV     R7,A
008C 75F003            MOV     B,#03H
008F A4                MUL     AB
0090 24FD              ADD     A,#0FDH
0092 F582              MOV     DPL,A
0094 E5F0              MOV     A,B
0096 34FF              ADDC    A,#0FFH
0098 F583              MOV     DPH,A
009A 120000      E     LCALL   ?C?PLDOPTR
009D C003              PUSH    AR3
009F C002              PUSH    AR2
00A1 C001              PUSH    AR1
00A3 900000      R     MOV     DPTR,#g_hal_usb+06H
00A6 E0                MOVX    A,@DPTR
00A7 FB                MOV     R3,A
00A8 A3                INC     DPTR
00A9 E0                MOVX    A,@DPTR
00AA FA                MOV     R2,A
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 65  

00AB A3                INC     DPTR
00AC E0                MOVX    A,@DPTR
00AD F9                MOV     R1,A
00AE EF                MOV     A,R7
00AF 14                DEC     A
00B0 75F003            MOV     B,#03H
00B3 A4                MUL     AB
00B4 F582              MOV     DPL,A
00B6 85F083            MOV     DPH,B
00B9 120000      E     LCALL   ?C?PLDOPTR
00BC 120000      E     LCALL   ?C?CLDPTR
00BF FF                MOV     R7,A
00C0 900000      R     MOV     DPTR,#req+05H
00C3 E0                MOVX    A,@DPTR
00C4 FE                MOV     R6,A
00C5 C3                CLR     C
00C6 9F                SUBB    A,R7
00C7 5004              JNC     ?C0099
00C9 AD06              MOV     R5,AR6
00CB 8005              SJMP    ?C0100
00CD         ?C0099:
00CD 120000      E     LCALL   ?C?CLDPTR
00D0 FF                MOV     R7,A
00D1 FD                MOV     R5,A
00D2         ?C0100:
00D2 D001              POP     AR1
00D4 D002              POP     AR2
00D6 D003              POP     AR3
00D8         ?C0253:
00D8 120000      R     LCALL   _packetize
                                           ; SOURCE LINE # 436
00DB 020000      R     LJMP    packetizer_isr_ep0_in
                                           ; SOURCE LINE # 437
                                           ; SOURCE LINE # 439
                                           ; SOURCE LINE # 444
                                           ; SOURCE LINE # 445
                                           ; SOURCE LINE # 446
                                           ; SOURCE LINE # 447
                                           ; SOURCE LINE # 448
00DE         ?C0112:
                                           ; SOURCE LINE # 449
00DE         ?C0254:
00DE 90C7B4            MOV     DPTR,#ep0cs
00E1 7411              MOV     A,#011H
00E3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 450
00E4 22                RET     
                                           ; SOURCE LINE # 451
00E5         ?C0113:
                                           ; SOURCE LINE # 452
00E5 120000      R     LCALL   usb_process_dev_req_cb_response
                                           ; SOURCE LINE # 453
                                           ; SOURCE LINE # 454
                                           ; SOURCE LINE # 455
00E8         ?C0114:
00E8 22                RET     
             ; FUNCTION usb_process_get_descriptor (END)

             ; FUNCTION isr_sudav (BEGIN)
                                           ; SOURCE LINE # 457
                                           ; SOURCE LINE # 458
                                           ; SOURCE LINE # 460
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 66  

0000 90C7E8            MOV     DPTR,#setupbuf
0003 E0                MOVX    A,@DPTR
0004 900000      R     MOV     DPTR,#req
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 461
0008 90C7E9            MOV     DPTR,#setupbuf+01H
000B E0                MOVX    A,@DPTR
000C 900000      R     MOV     DPTR,#req+01H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 462
0010 90C7EA            MOV     DPTR,#setupbuf+02H
0013 E0                MOVX    A,@DPTR
0014 900000      R     MOV     DPTR,#req+03H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 463
0018 90C7EB            MOV     DPTR,#setupbuf+03H
001B E0                MOVX    A,@DPTR
001C 900000      R     MOV     DPTR,#req+02H
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 464
0020 90C7EC            MOV     DPTR,#setupbuf+04H
0023 E0                MOVX    A,@DPTR
0024 900000      R     MOV     DPTR,#req+04H
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 465
0028 90C7EE            MOV     DPTR,#setupbuf+06H
002B E0                MOVX    A,@DPTR
002C 900000      R     MOV     DPTR,#req+05H
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 466
0030 90C7EF            MOV     DPTR,#setupbuf+07H
0033 E0                MOVX    A,@DPTR
0034 D3                SETB    C
0035 9400              SUBB    A,#00H
0037 4006              JC      ?C0115
                                           ; SOURCE LINE # 467
                                           ; SOURCE LINE # 468
0039 900000      R     MOV     DPTR,#req+05H
003C 74FF              MOV     A,#0FFH
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 469
003F         ?C0115:
                                           ; SOURCE LINE # 472
003F 900000      R     MOV     DPTR,#req
0042 E0                MOVX    A,@DPTR
0043 5460              ANL     A,#060H
0045 6003              JZ      $ + 5H
0047 020000      R     LJMP    ?C0116
                                           ; SOURCE LINE # 473
                                           ; SOURCE LINE # 474
004A A3                INC     DPTR
004B E0                MOVX    A,@DPTR
004C B40B00            CJNE    A,#0BH,?C0235
004F         ?C0235:
004F 4003              JC      $ + 5H
0051 020000      R     LJMP    ?C0180
0054 900000      R     MOV     DPTR,#?C0236
0057 F8                MOV     R0,A
0058 28                ADD     A,R0
0059 28                ADD     A,R0
005A 73                JMP     @A+DPTR
005B         ?C0236:
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 67  

005B 020000      R     LJMP    ?C0119
005E 020000      R     LJMP    ?C0121
0061 020000      R     LJMP    ?C0180
0064 020000      R     LJMP    ?C0121
0067 020000      R     LJMP    ?C0180
006A 020000      R     LJMP    ?C0150
006D 020000      R     LJMP    ?C0118
0070 020000      R     LJMP    ?C0180
0073 020000      R     LJMP    ?C0151
0076 020000      R     LJMP    ?C0159
0079 020000      R     LJMP    ?C0173
                                           ; SOURCE LINE # 475
                                           ; SOURCE LINE # 476
007C         ?C0118:
                                           ; SOURCE LINE # 477
007C 020000      R     LJMP    usb_process_get_descriptor
                                           ; SOURCE LINE # 478
                                           ; SOURCE LINE # 479
007F         ?C0119:
                                           ; SOURCE LINE # 480
007F 020000      R     LJMP    usb_process_get_status
                                           ; SOURCE LINE # 481
                                           ; SOURCE LINE # 482
                                           ; SOURCE LINE # 483
0082         ?C0121:
                                           ; SOURCE LINE # 484
0082 900000      R     MOV     DPTR,#req
0085 E0                MOVX    A,@DPTR
0086 24FE              ADD     A,#0FEH
0088 6024              JZ      ?C0134
008A 2402              ADD     A,#02H
008C 7042              JNZ     ?C0149
                                           ; SOURCE LINE # 485
                                           ; SOURCE LINE # 486
008E         ?C0123:
                                           ; SOURCE LINE # 487
008E 900000      R     MOV     DPTR,#req+03H
0091 E0                MOVX    A,@DPTR
0092 B40116            CJNE    A,#01H,?C0133
                                           ; SOURCE LINE # 488
                                           ; SOURCE LINE # 489
0095 900000      R     MOV     DPTR,#req+01H
0098 E0                MOVX    A,@DPTR
0099 900000      R     MOV     DPTR,#g_hal_usb+0DH
009C B40106            CJNE    A,#01H,?C0125
                                           ; SOURCE LINE # 490
009F E0                MOVX    A,@DPTR
00A0 54FD              ANL     A,#0FDH
00A2 F0                MOVX    @DPTR,A
00A3 806C              SJMP    ?C0258
00A5         ?C0125:
                                           ; SOURCE LINE # 492
00A5 E0                MOVX    A,@DPTR
00A6 4402              ORL     A,#02H
00A8 F0                MOVX    @DPTR,A
00A9         ?C0129:
                                           ; SOURCE LINE # 493
                                           ; SOURCE LINE # 494
00A9 8066              SJMP    ?C0258
                                           ; SOURCE LINE # 496
00AB         ?C0133:
                                           ; SOURCE LINE # 497
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 68  

                                           ; SOURCE LINE # 498
                                           ; SOURCE LINE # 499
00AB 020000      R     LJMP    ?C0264
                                           ; SOURCE LINE # 501
00AE         ?C0134:
                                           ; SOURCE LINE # 502
00AE 900000      R     MOV     DPTR,#req+03H
00B1 E0                MOVX    A,@DPTR
00B2 7019              JNZ     ?C0144
                                           ; SOURCE LINE # 503
                                           ; SOURCE LINE # 504
00B4 900000      R     MOV     DPTR,#req+01H
00B7 E0                MOVX    A,@DPTR
00B8 900000      R     MOV     DPTR,#req+04H
00BB B40106            CJNE    A,#01H,?C0136
                                           ; SOURCE LINE # 505
00BE E0                MOVX    A,@DPTR
00BF FF                MOV     R7,A
00C0 E4                CLR     A
00C1 FD                MOV     R5,A
00C2 8004              SJMP    ?C0257
00C4         ?C0136:
                                           ; SOURCE LINE # 507
00C4 E0                MOVX    A,@DPTR
00C5 FF                MOV     R7,A
00C6 7D01              MOV     R5,#01H
00C8         ?C0257:
00C8 120000      R     LCALL   _hal_usb_endpoint_stall
00CB         ?C0140:
                                           ; SOURCE LINE # 508
00CB         ?C0255:
                                           ; SOURCE LINE # 509
00CB 8044              SJMP    ?C0258
                                           ; SOURCE LINE # 511
00CD         ?C0144:
                                           ; SOURCE LINE # 512
00CD         ?C0256:
                                           ; SOURCE LINE # 513
                                           ; SOURCE LINE # 514
00CD 020000      R     LJMP    ?C0264
                                           ; SOURCE LINE # 515
                                           ; SOURCE LINE # 516
00D0         ?C0149:
                                           ; SOURCE LINE # 517
00D0         ?C0259:
                                           ; SOURCE LINE # 518
00D0 020000      R     LJMP    ?C0264
                                           ; SOURCE LINE # 519
                                           ; SOURCE LINE # 520
                                           ; SOURCE LINE # 522
00D3         ?C0150:
                                           ; SOURCE LINE # 523
00D3 900000      R     MOV     DPTR,#g_hal_usb+010H
00D6 7403              MOV     A,#03H
00D8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 524
00D9 E4                CLR     A
00DA 900000      R     MOV     DPTR,#g_hal_usb+0EH
00DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 525
00DE 22                RET     
                                           ; SOURCE LINE # 526
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 69  

00DF         ?C0151:
                                           ; SOURCE LINE # 527
00DF 900000      R     MOV     DPTR,#g_hal_usb+010H
00E2 E0                MOVX    A,@DPTR
00E3 24FC              ADD     A,#0FCH
00E5 600E              JZ      ?C0154
00E7 04                INC     A
00E8 7010              JNZ     ?C0158
                                           ; SOURCE LINE # 528
                                           ; SOURCE LINE # 529
00EA         ?C0153:
                                           ; SOURCE LINE # 530
00EA E4                CLR     A
00EB 90C700            MOV     DPTR,#in0buf
00EE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 531
00EF 90C7B5            MOV     DPTR,#in0bc
00F2 04                INC     A
00F3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 532
00F4 22                RET     
                                           ; SOURCE LINE # 533
00F5         ?C0154:
                                           ; SOURCE LINE # 534
00F5 900000      R     MOV     DPTR,#g_hal_usb+0EH
                                           ; SOURCE LINE # 535
                                           ; SOURCE LINE # 536
00F8 803A              SJMP    ?C0261
                                           ; SOURCE LINE # 537
00FA         ?C0158:
                                           ; SOURCE LINE # 538
00FA         ?C0260:
                                           ; SOURCE LINE # 539
00FA 8065              SJMP    ?C0264
                                           ; SOURCE LINE # 540
                                           ; SOURCE LINE # 541
                                           ; SOURCE LINE # 542
00FC         ?C0159:
                                           ; SOURCE LINE # 543
00FC 900000      R     MOV     DPTR,#req+03H
00FF E0                MOVX    A,@DPTR
0100 14                DEC     A
0101 6015              JZ      ?C0165
0103 04                INC     A
0104 7029              JNZ     ?C0172
                                           ; SOURCE LINE # 544
                                           ; SOURCE LINE # 545
0106         ?C0161:
                                           ; SOURCE LINE # 546
0106 900000      R     MOV     DPTR,#g_hal_usb+010H
0109 7403              MOV     A,#03H
010B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 547
010C E4                CLR     A
010D 900000      R     MOV     DPTR,#g_hal_usb+0EH
0110 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 548
0111         ?C0258:
0111 90C7B4            MOV     DPTR,#ep0cs
0114 7402              MOV     A,#02H
0116 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 549
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 70  

0117 22                RET     
                                           ; SOURCE LINE # 550
0118         ?C0165:
                                           ; SOURCE LINE # 551
0118 900000      R     MOV     DPTR,#g_hal_usb+010H
011B 7404              MOV     A,#04H
011D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 552
011E 900000      R     MOV     DPTR,#g_hal_usb+0DH
0121 E0                MOVX    A,@DPTR
0122 4401              ORL     A,#01H
0124 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 553
0125 A3                INC     DPTR
0126 7401              MOV     A,#01H
0128 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 554
0129 90C7B4            MOV     DPTR,#ep0cs
012C 04                INC     A
012D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 555
012E 22                RET     
                                           ; SOURCE LINE # 556
012F         ?C0172:
                                           ; SOURCE LINE # 557
012F         ?C0262:
                                           ; SOURCE LINE # 558
012F 8030              SJMP    ?C0264
                                           ; SOURCE LINE # 559
                                           ; SOURCE LINE # 560
                                           ; SOURCE LINE # 561
0131         ?C0173:
                                           ; SOURCE LINE # 562
0131 900000      R     MOV     DPTR,#g_hal_usb+0FH
0134         ?C0261:
0134 E0                MOVX    A,@DPTR
0135 90C700            MOV     DPTR,#in0buf
0138 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 563
0139 90C7B5            MOV     DPTR,#in0bc
013C 7401              MOV     A,#01H
013E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 564
013F 22                RET     
                                           ; SOURCE LINE # 565
                                           ; SOURCE LINE # 566
                                           ; SOURCE LINE # 567
                                           ; SOURCE LINE # 568
0140         ?C0180:
                                           ; SOURCE LINE # 569
0140         ?C0263:
                                           ; SOURCE LINE # 570
0140 801F              SJMP    ?C0264
                                           ; SOURCE LINE # 571
                                           ; SOURCE LINE # 572
0142         ?C0116:
                                           ; SOURCE LINE # 574
0142 900000      R     MOV     DPTR,#req
0145 E0                MOVX    A,@DPTR
0146 FF                MOV     R7,A
0147 5460              ANL     A,#060H
0149 FE                MOV     R6,A
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 71  

014A BE2014            CJNE    R6,#020H,?C0188
                                           ; SOURCE LINE # 575
                                           ; SOURCE LINE # 576
014D 900000      R     MOV     DPTR,#req+05H
0150 E0                MOVX    A,@DPTR
0151 600B              JZ      ?C0183
0153 EF                MOV     A,R7
0154 20E707            JB      ACC.7,?C0183
                                           ; SOURCE LINE # 577
                                           ; SOURCE LINE # 580
0157 90C7C5            MOV     DPTR,#out0bc
015A 74FF              MOV     A,#0FFH
015C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 581
015D 22                RET     
015E         ?C0183:
                                           ; SOURCE LINE # 583
                                           ; SOURCE LINE # 584
015E 020000      R     LJMP    usb_process_dev_req_cb_response
                                           ; SOURCE LINE # 585
                                           ; SOURCE LINE # 587
                                           ; SOURCE LINE # 589
0161         ?C0188:
                                           ; SOURCE LINE # 590
0161         ?C0264:
0161 90C7B4            MOV     DPTR,#ep0cs
0164 7411              MOV     A,#011H
0166 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 591
                                           ; SOURCE LINE # 592
0167         ?C0189:
0167 22                RET     
             ; FUNCTION isr_sudav (END)

             ; FUNCTION isr_suspend (BEGIN)
                                           ; SOURCE LINE # 594
                                           ; SOURCE LINE # 595
                                           ; SOURCE LINE # 596
;---- Variable 'allow_remote_wu' assigned to Register 'R5' ----
0000 E4                CLR     A
0001 FD                MOV     R5,A
                                           ; SOURCE LINE # 597
0002 900000      R     MOV     DPTR,#g_hal_usb+0DH
0005 E0                MOVX    A,@DPTR
0006 54FB              ANL     A,#0FBH
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 599
0009 900000      R     MOV     DPTR,#g_hal_usb+010H
000C E0                MOVX    A,@DPTR
000D B40408            CJNE    A,#04H,?C0190
                                           ; SOURCE LINE # 600
                                           ; SOURCE LINE # 601
0010 900000      R     MOV     DPTR,#g_hal_usb+0DH
0013 E0                MOVX    A,@DPTR
0014 30E101            JNB     ACC.1,?C0190
                                           ; SOURCE LINE # 602
                                           ; SOURCE LINE # 603
0017 0D                INC     R5
                                           ; SOURCE LINE # 604
                                           ; SOURCE LINE # 605
0018         ?C0190:
                                           ; SOURCE LINE # 607
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 72  

0018 900000      R     MOV     DPTR,#g_hal_usb+010H
001B 7405              MOV     A,#05H
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 609
001E 900000      R     MOV     DPTR,#g_hal_usb+01AH
0021 E0                MOVX    A,@DPTR
0022 FB                MOV     R3,A
0023 A3                INC     DPTR
0024 E0                MOVX    A,@DPTR
0025 FA                MOV     R2,A
0026 A3                INC     DPTR
0027 E0                MOVX    A,@DPTR
0028 4A                ORL     A,R2
0029 4B                ORL     A,R3
002A 600F              JZ      ?C0193
                                           ; SOURCE LINE # 610
                                           ; SOURCE LINE # 611
002C AF05              MOV     R7,AR5
002E 900000      R     MOV     DPTR,#g_hal_usb+01AH
0031 A3                INC     DPTR
0032 A3                INC     DPTR
0033 E0                MOVX    A,@DPTR
0034 F582              MOV     DPL,A
0036 8A83              MOV     DPH,R2
0038 120000      E     LCALL   ?C?ICALL2
                                           ; SOURCE LINE # 612
                                           ; SOURCE LINE # 613
003B         ?C0193:
003B 22                RET     
             ; FUNCTION isr_suspend (END)

             ; FUNCTION isr_usbreset (BEGIN)
                                           ; SOURCE LINE # 615
                                           ; SOURCE LINE # 616
                                           ; SOURCE LINE # 617
0000 900000      R     MOV     DPTR,#g_hal_usb+010H
0003 7402              MOV     A,#02H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 618
0006 E4                CLR     A
0007 900000      R     MOV     DPTR,#g_hal_usb+0EH
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 619
000B A3                INC     DPTR
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 620
000D 900000      R     MOV     DPTR,#g_hal_usb+0DH
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 621
0011 900000      R     MOV     DPTR,#g_hal_usb+014H
0014 E0                MOVX    A,@DPTR
0015 FB                MOV     R3,A
0016 A3                INC     DPTR
0017 E0                MOVX    A,@DPTR
0018 FA                MOV     R2,A
0019 A3                INC     DPTR
001A E0                MOVX    A,@DPTR
001B 4A                ORL     A,R2
001C 4B                ORL     A,R3
001D 600A              JZ      ?C0195
001F 900000      R     MOV     DPTR,#g_hal_usb+014H
0022 A3                INC     DPTR
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 73  

0023 A3                INC     DPTR
0024 E0                MOVX    A,@DPTR
0025 F9                MOV     R1,A
0026 120000      E     LCALL   ?C?ICALL
                                           ; SOURCE LINE # 622
0029         ?C0195:
0029 22                RET     
             ; FUNCTION isr_usbreset (END)

             ; FUNCTION usb_wu_isr (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C0D0              PUSH    PSW
000A 75D000            MOV     PSW,#00H
000D C000              PUSH    AR0
000F C001              PUSH    AR1
0011 C002              PUSH    AR2
0013 C003              PUSH    AR3
0015 C004              PUSH    AR4
0017 C005              PUSH    AR5
0019 C006              PUSH    AR6
001B C007              PUSH    AR7
                                           ; SOURCE LINE # 625
                                           ; SOURCE LINE # 635
001D 90C7D6            MOV     DPTR,#usbcs
0020 E0                MOVX    A,@DPTR
0021 30E729            JNB     ACC.7,?C0196
                                           ; SOURCE LINE # 636
                                           ; SOURCE LINE # 638
0024 7480              MOV     A,#080H
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 641
0027 900000      R     MOV     DPTR,#g_hal_usb+0DH
002A E0                MOVX    A,@DPTR
002B 30E126            JNB     ACC.1,?C0198
                                           ; SOURCE LINE # 642
                                           ; SOURCE LINE # 645
002E 90C7D6            MOV     DPTR,#usbcs
0031 E0                MOVX    A,@DPTR
0032 4402              ORL     A,#02H
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 648
0035 00                NOP     
                                           ; SOURCE LINE # 649
0036 00                NOP     
                                           ; SOURCE LINE # 651
0037 E0                MOVX    A,@DPTR
;---- Variable 't' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 654
0038 54FD              ANL     A,#0FDH
                                           ; SOURCE LINE # 657
003A 4401              ORL     A,#01H
                                           ; SOURCE LINE # 661
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 665
003D 7F07              MOV     R7,#07H
003F 7E00              MOV     R6,#00H
0041 120000      E     LCALL   _delay_ms
                                           ; SOURCE LINE # 668
0044 90C7D6            MOV     DPTR,#usbcs
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 74  

0047 E0                MOVX    A,@DPTR
0048 54FE              ANL     A,#0FEH
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 669
                                           ; SOURCE LINE # 670
004B 8007              SJMP    ?C0198
004D         ?C0196:
                                           ; SOURCE LINE # 672
                                           ; SOURCE LINE # 674
004D 900000      R     MOV     DPTR,#g_hal_usb+0DH
0050 E0                MOVX    A,@DPTR
0051 4404              ORL     A,#04H
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 675
0054         ?C0198:
                                           ; SOURCE LINE # 677
0054 900000      R     MOV     DPTR,#g_hal_usb+0DH
0057 E0                MOVX    A,@DPTR
0058 900000      R     MOV     DPTR,#g_hal_usb+010H
005B 30E005            JNB     ACC.0,?C0199
                                           ; SOURCE LINE # 678
                                           ; SOURCE LINE # 679
005E 7404              MOV     A,#04H
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 680
0061 8003              SJMP    ?C0200
0063         ?C0199:
                                           ; SOURCE LINE # 682
                                           ; SOURCE LINE # 683
0063 7402              MOV     A,#02H
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 684
0066         ?C0200:
                                           ; SOURCE LINE # 687
0066 900000      R     MOV     DPTR,#g_hal_usb+017H
0069 A3                INC     DPTR
006A E0                MOVX    A,@DPTR
006B FA                MOV     R2,A
006C A3                INC     DPTR
006D E0                MOVX    A,@DPTR
006E F9                MOV     R1,A
006F 120000      E     LCALL   ?C?ICALL
                                           ; SOURCE LINE # 688
0072 D007              POP     AR7
0074 D006              POP     AR6
0076 D005              POP     AR5
0078 D004              POP     AR4
007A D003              POP     AR3
007C D002              POP     AR2
007E D001              POP     AR1
0080 D000              POP     AR0
0082 D0D0              POP     PSW
0084 D082              POP     DPL
0086 D083              POP     DPH
0088 D0F0              POP     B
008A D0E0              POP     ACC
008C 32                RETI    
             ; FUNCTION usb_wu_isr (END)

             ; FUNCTION _usb_process_ep_response (BEGIN)
                                           ; SOURCE LINE # 691
;---- Variable 'ret' assigned to Register 'R1' ----
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 75  

0000 A907              MOV     R1,AR7
;---- Variable 'bc_ptr' assigned to Register 'DPTR' ----
0002 8B82              MOV     DPL,R3
0004 8A83              MOV     DPH,R2
;---- Variable 'cs_ptr' assigned to Register 'R4/R5' ----
                                           ; SOURCE LINE # 692
                                           ; SOURCE LINE # 693
0006 E9                MOV     A,R1
0007 B4FF04            CJNE    A,#0FFH,?C0202
                                           ; SOURCE LINE # 694
                                           ; SOURCE LINE # 695
000A 74FF              MOV     A,#0FFH
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 696
000D 22                RET     
000E         ?C0202:
                                           ; SOURCE LINE # 697
000E E9                MOV     A,R1
000F 30E708            JNB     ACC.7,?C0204
                                           ; SOURCE LINE # 698
                                           ; SOURCE LINE # 699
0012 8D82              MOV     DPL,R5
0014 8C83              MOV     DPH,R4
0016 7401              MOV     A,#01H
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 700
0019 22                RET     
001A         ?C0204:
                                           ; SOURCE LINE # 701
001A E9                MOV     A,R1
001B 5460              ANL     A,#060H
001D FF                MOV     R7,A
001E BF6008            CJNE    R7,#060H,?C0206
                                           ; SOURCE LINE # 702
                                           ; SOURCE LINE # 703
0021 8D82              MOV     DPL,R5
0023 8C83              MOV     DPH,R4
0025 7402              MOV     A,#02H
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 704
0028 22                RET     
0029         ?C0206:
                                           ; SOURCE LINE # 705
0029 E9                MOV     A,R1
002A 7002              JNZ     ?C0208
                                           ; SOURCE LINE # 706
                                           ; SOURCE LINE # 707
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 708
002D 22                RET     
002E         ?C0208:
                                           ; SOURCE LINE # 710
                                           ; SOURCE LINE # 711
002E E9                MOV     A,R1
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 712
                                           ; SOURCE LINE # 713
0030         ?C0210:
0030 22                RET     
             ; FUNCTION _usb_process_ep_response (END)

             ; FUNCTION usb_isr (BEGIN)
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 76  

0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C0D0              PUSH    PSW
000A 75D000            MOV     PSW,#00H
000D C000              PUSH    AR0
000F C001              PUSH    AR1
0011 C002              PUSH    AR2
0013 C003              PUSH    AR3
0015 C004              PUSH    AR4
0017 C005              PUSH    AR5
0019 C006              PUSH    AR6
001B C007              PUSH    AR7
                                           ; SOURCE LINE # 715
                                           ; SOURCE LINE # 723
001D 90C7A8            MOV     DPTR,#ivec
0020 E0                MOVX    A,@DPTR
0021 120000      E     LCALL   ?C?CCASE
0024 0000        R     DW      ?C0212
0026 00                DB      00H
0027 0000        R     DW      ?C0213
0029 04                DB      04H
002A 0000        R     DW      ?C0214
002C 08                DB      08H
002D 0000        R     DW      ?C0215
002F 0C                DB      0CH
0030 0000        R     DW      ?C0216
0032 10                DB      010H
0033 0000        R     DW      ?C0217
0035 18                DB      018H
0036 0000        R     DW      ?C0218
0038 1C                DB      01CH
0039 0000        R     DW      ?C0223
003B 20                DB      020H
003C 0000        R     DW      ?C0228
003E 24                DB      024H
003F 0000        R     DW      ?C0223
0041 28                DB      028H
0042 0000        R     DW      ?C0228
0044 2C                DB      02CH
0045 0000        R     DW      ?C0223
0047 30                DB      030H
0048 0000        R     DW      ?C0228
004A 34                DB      034H
004B 0000        R     DW      ?C0223
004D 38                DB      038H
004E 0000        R     DW      ?C0228
0050 3C                DB      03CH
0051 0000        R     DW      ?C0223
0053 40                DB      040H
0054 0000        R     DW      ?C0228
0056 44                DB      044H
0057 0000              DW      00H
0059 0000        R     DW      ?C0230
                                           ; SOURCE LINE # 724
                                           ; SOURCE LINE # 725
005B         ?C0212:
                                           ; SOURCE LINE # 726
005B 90C7AB            MOV     DPTR,#usbirq
005E 7401              MOV     A,#01H
0060 F0                MOVX    @DPTR,A
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 77  

                                           ; SOURCE LINE # 727
0061 120000      R     LCALL   isr_sudav
                                           ; SOURCE LINE # 728
0064 020000      R     LJMP    ?C0230
                                           ; SOURCE LINE # 729
0067         ?C0213:
                                           ; SOURCE LINE # 730
0067 90C7AB            MOV     DPTR,#usbirq
006A 7402              MOV     A,#02H
006C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 731
006D 020000      R     LJMP    ?C0230
                                           ; SOURCE LINE # 732
0070         ?C0214:
                                           ; SOURCE LINE # 733
0070 90C7AB            MOV     DPTR,#usbirq
0073 7404              MOV     A,#04H
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 734
0076 900000      R     MOV     DPTR,#i_packetizer
0079 E4                CLR     A
007A F0                MOVX    @DPTR,A
007B A3                INC     DPTR
007C F0                MOVX    @DPTR,A
007D A3                INC     DPTR
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 735
007F A3                INC     DPTR
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 736
0081 A3                INC     DPTR
0082 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 737
0083 900000      R     MOV     DPTR,#stall_data_size0
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 738
0087 020000      R     LJMP    ?C0230
                                           ; SOURCE LINE # 739
008A         ?C0215:
                                           ; SOURCE LINE # 740
008A 90C7AB            MOV     DPTR,#usbirq
008D 7408              MOV     A,#08H
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 741
0090 120000      R     LCALL   isr_suspend
                                           ; SOURCE LINE # 742
0093 020000      R     LJMP    ?C0230
                                           ; SOURCE LINE # 743
0096         ?C0216:
                                           ; SOURCE LINE # 744
0096 90C7AB            MOV     DPTR,#usbirq
0099 7410              MOV     A,#010H
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 745
009C 120000      R     LCALL   isr_usbreset
                                           ; SOURCE LINE # 746
009F 020000      R     LJMP    ?C0230
                                           ; SOURCE LINE # 747
00A2         ?C0217:
                                           ; SOURCE LINE # 748
00A2 90C7A9            MOV     DPTR,#in_irq
00A5 7401              MOV     A,#01H
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 78  

00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 749
00A8 120000      R     LCALL   packetizer_isr_ep0_in
                                           ; SOURCE LINE # 750
00AB 020000      R     LJMP    ?C0230
                                           ; SOURCE LINE # 751
00AE         ?C0218:
                                           ; SOURCE LINE # 752
00AE 90C7AA            MOV     DPTR,#out_irq
00B1 7401              MOV     A,#01H
00B3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 753
00B4 900000      R     MOV     DPTR,#i_packetizer+03H
00B7 E4                CLR     A
00B8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 754
00B9 120000      R     LCALL   usb_process_dev_req_cb_response
                                           ; SOURCE LINE # 755
00BC 020000      R     LJMP    ?C0230
                                           ; SOURCE LINE # 756
                                           ; SOURCE LINE # 757
                                           ; SOURCE LINE # 758
                                           ; SOURCE LINE # 759
                                           ; SOURCE LINE # 760
00BF         ?C0223:
                                           ; SOURCE LINE # 762
00BF 90C7A8            MOV     DPTR,#ivec
00C2 E0                MOVX    A,@DPTR
00C3 24E8              ADD     A,#0E8H
00C5 13                RRC     A
00C6 13                RRC     A
00C7 13                RRC     A
00C8 541F              ANL     A,#01FH
00CA 900000      R     MOV     DPTR,#ep
00CD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 764
00CE E0                MOVX    A,@DPTR
00CF FF                MOV     R7,A
00D0 7401              MOV     A,#01H
00D2 A807              MOV     R0,AR7
00D4 08                INC     R0
00D5 8002              SJMP    ?C0240
00D7         ?C0239:
00D7 C3                CLR     C
00D8 33                RLC     A
00D9         ?C0240:
00D9 D8FC              DJNZ    R0,?C0239
00DB 90C7A9            MOV     DPTR,#in_irq
00DE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 766
00DF EF                MOV     A,R7
00E0 547F              ANL     A,#07FH
00E2 75F002            MOV     B,#02H
00E5 A4                MUL     AB
00E6 24B4              ADD     A,#LOW in1cs+0FFFEH
00E8 F9                MOV     R1,A
00E9 74C7              MOV     A,#HIGH in1cs+0FFFEH
00EB 35F0              ADDC    A,B
00ED AF01              MOV     R7,AR1
00EF 900000      R     MOV     DPTR,#cs_ptr
00F2 F0                MOVX    @DPTR,A
00F3 A3                INC     DPTR
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 79  

00F4 EF                MOV     A,R7
00F5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 767
00F6 900000      R     MOV     DPTR,#ep
00F9 E0                MOVX    A,@DPTR
00FA 547F              ANL     A,#07FH
00FC 75F080            MOV     B,#080H
00FF A4                MUL     AB
0100 FF                MOV     R7,A
0101 C3                CLR     C
0102 7400              MOV     A,#LOW in0buf
0104 9F                SUBB    A,R7
0105 F9                MOV     R1,A
0106 74C7              MOV     A,#HIGH in0buf
0108 95F0              SUBB    A,B
010A AF01              MOV     R7,AR1
010C 900000      R     MOV     DPTR,#buf_ptr
010F F0                MOVX    @DPTR,A
0110 A3                INC     DPTR
0111 EF                MOV     A,R7
0112 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 768
0113 900000      R     MOV     DPTR,#ep
0116 E0                MOVX    A,@DPTR
0117 547F              ANL     A,#07FH
0119 75F002            MOV     B,#02H
011C A4                MUL     AB
011D 24B5              ADD     A,#LOW in0bc
011F F9                MOV     R1,A
0120 74C7              MOV     A,#HIGH in0bc
0122 35F0              ADDC    A,B
0124 AF01              MOV     R7,AR1
0126 900000      R     MOV     DPTR,#bc_ptr
0129 F0                MOVX    @DPTR,A
012A A3                INC     DPTR
012B EF                MOV     A,R7
012C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 772
012D 900000      R     MOV     DPTR,#cs_ptr
0130 E0                MOVX    A,@DPTR
0131 FC                MOV     R4,A
0132 A3                INC     DPTR
0133 E0                MOVX    A,@DPTR
0134 FD                MOV     R5,A
0135 900000      R     MOV     DPTR,#bc_ptr
0138 E0                MOVX    A,@DPTR
0139 FA                MOV     R2,A
013A A3                INC     DPTR
013B E0                MOVX    A,@DPTR
013C FB                MOV     R3,A
013D 7F60              MOV     R7,#060H
                                           ; SOURCE LINE # 773
013F 020000      R     LJMP    ?C0265
                                           ; SOURCE LINE # 774
                                           ; SOURCE LINE # 775
                                           ; SOURCE LINE # 776
                                           ; SOURCE LINE # 777
                                           ; SOURCE LINE # 778
0142         ?C0228:
                                           ; SOURCE LINE # 780
0142 90C7A8            MOV     DPTR,#ivec
0145 E0                MOVX    A,@DPTR
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 80  

0146 24E4              ADD     A,#0E4H
0148 13                RRC     A
0149 13                RRC     A
014A 13                RRC     A
014B 541F              ANL     A,#01FH
014D 900000      R     MOV     DPTR,#ep
0150 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 783
0151 E0                MOVX    A,@DPTR
0152 FF                MOV     R7,A
0153 7401              MOV     A,#01H
0155 A807              MOV     R0,AR7
0157 08                INC     R0
0158 8002              SJMP    ?C0242
015A         ?C0241:
015A C3                CLR     C
015B 33                RLC     A
015C         ?C0242:
015C D8FC              DJNZ    R0,?C0241
015E 90C7AA            MOV     DPTR,#out_irq
0161 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 785
0162 EF                MOV     A,R7
0163 547F              ANL     A,#07FH
0165 75F002            MOV     B,#02H
0168 A4                MUL     AB
0169 24C4              ADD     A,#LOW out1cs+0FFFEH
016B F9                MOV     R1,A
016C 74C7              MOV     A,#HIGH out1cs+0FFFEH
016E 35F0              ADDC    A,B
0170 AF01              MOV     R7,AR1
0172 900000      R     MOV     DPTR,#cs_ptr
0175 F0                MOVX    @DPTR,A
0176 A3                INC     DPTR
0177 EF                MOV     A,R7
0178 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 786
0179 900000      R     MOV     DPTR,#ep
017C E0                MOVX    A,@DPTR
017D 75F080            MOV     B,#080H
0180 A4                MUL     AB
0181 FF                MOV     R7,A
0182 C3                CLR     C
0183 74C0              MOV     A,#LOW out0buf
0185 9F                SUBB    A,R7
0186 F9                MOV     R1,A
0187 74C6              MOV     A,#HIGH out0buf
0189 95F0              SUBB    A,B
018B AF01              MOV     R7,AR1
018D 900000      R     MOV     DPTR,#buf_ptr
0190 F0                MOVX    @DPTR,A
0191 A3                INC     DPTR
0192 EF                MOV     A,R7
0193 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 787
0194 900000      R     MOV     DPTR,#ep
0197 E0                MOVX    A,@DPTR
0198 75F002            MOV     B,#02H
019B A4                MUL     AB
019C 7AC7              MOV     R2,#HIGH out0bc
019E 24C5              ADD     A,#LOW out0bc
01A0 F9                MOV     R1,A
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 81  

01A1 74C7              MOV     A,#HIGH out0bc
01A3 35F0              ADDC    A,B
01A5 AF01              MOV     R7,AR1
01A7 900000      R     MOV     DPTR,#bc_ptr
01AA F0                MOVX    @DPTR,A
01AB A3                INC     DPTR
01AC EF                MOV     A,R7
01AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 791
01AE 900000      R     MOV     DPTR,#bc_ptr
01B1 E0                MOVX    A,@DPTR
01B2 FC                MOV     R4,A
01B3 A3                INC     DPTR
01B4 E0                MOVX    A,@DPTR
01B5 FD                MOV     R5,A
01B6 900000      R     MOV     DPTR,#buf_ptr
01B9 E0                MOVX    A,@DPTR
01BA FE                MOV     R6,A
01BB A3                INC     DPTR
01BC E0                MOVX    A,@DPTR
01BD FF                MOV     R7,A
01BE 120000      E     LCALL   _?ep_1_out_cb
;---- Variable 'ret' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 792
01C1 900000      R     MOV     DPTR,#cs_ptr
01C4 E0                MOVX    A,@DPTR
01C5 FC                MOV     R4,A
01C6 A3                INC     DPTR
01C7 E0                MOVX    A,@DPTR
01C8 FD                MOV     R5,A
01C9 900000      R     MOV     DPTR,#bc_ptr
01CC E0                MOVX    A,@DPTR
01CD FA                MOV     R2,A
01CE A3                INC     DPTR
01CF E0                MOVX    A,@DPTR
01D0 FB                MOV     R3,A
01D1         ?C0265:
01D1 120000      R     LCALL   _usb_process_ep_response
                                           ; SOURCE LINE # 793
                                           ; SOURCE LINE # 794
                                           ; SOURCE LINE # 795
                                           ; SOURCE LINE # 796
                                           ; SOURCE LINE # 797
01D4         ?C0230:
01D4 D007              POP     AR7
01D6 D006              POP     AR6
01D8 D005              POP     AR5
01DA D004              POP     AR4
01DC D003              POP     AR3
01DE D002              POP     AR2
01E0 D001              POP     AR1
01E2 D000              POP     AR0
01E4 D0D0              POP     PSW
01E6 D082              POP     DPL
01E8 D083              POP     DPH
01EA D0F0              POP     B
01EC D0E0              POP     ACC
01EE 32                RETI    
             ; FUNCTION usb_isr (END)

C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 82  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


uint16_t . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
usbfrml. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7D8H  1
P0 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0080H  1
STALL. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
i_packetizer . . . . . . . . . . . . .  STATIC   XDATA  STRUCT   0000H  5
_hal_usb_endpoint_config . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ep_num . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0004H  1
  ep_size. . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  endpoint_isr . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  bc_ptr . . . . . . . . . . . . . . .  * REG *  DATA   PTR      0082H  2
  temp . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
  stemp. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
in_irq . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7A9H  1
usbbav . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7AFH  1
int32_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
out_irq. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7AAH  1
DEFAULT. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
packetizer_isr_ep0_in. . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  size . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
int16_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
usbien . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7AEH  1
bin1addr . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C789H  1
hal_usb_get_state. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
isosize. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7E3H  1
bin2addr . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C78AH  1
bin3addr . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C78BH  1
bout1addr. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C781H  1
bin4addr . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C78CH  1
bout2addr. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C782H  1
IEN0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A8H  1
bin5addr . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C78DH  1
bout3addr. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C783H  1
packetizer_t . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  5
  data_ptr . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  3
  data_size. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  pkt_size . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
IEN1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B8H  1
bout4addr. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C784H  1
bout5addr. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C785H  1
togctl . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7D7H  1
g_usb_string_desc. . . . . . . . . . .  EXTERN   CODE   STRUCT   -----  6
ADDRESSED. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
isoerr . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7A0H  1
USBWU. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BBH  1
i_endpoint_in_isr. . . . . . . . . . .  STATIC   XDATA  ARRAY    0005H  15
POWERED. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
usbirq . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7ABH  1
i_endpoint_out_isr . . . . . . . . . .  STATIC   XDATA  ARRAY    0014H  15
zbcout . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7A2H  1
DATA . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
usb_descs_templ_t. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  13
  dev. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  3
  conf . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0003H  3
  string . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0006H  3
  string_zero. . . . . . . . . . . . .  MEMBER   -----  ARRAY    0009H  4
g_usb_conf_desc. . . . . . . . . . . .  EXTERN   CODE   STRUCT   -----  32
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 83  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


hal_usb_dev_req_resp_t . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
hal_usb_bus_disconnect . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
isr_usbreset . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
usbcs. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7D6H  1
usb_string_desc_templ_t. . . . . . . .  TYPEDEF  -----  STRUCT   -----  6
  idx. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  6
hal_usb_cb_endpoint_t. . . . . . . . .  TYPEDEF  -----  PTR      -----  3
SWRST. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A7H  1
hal_usb_common_desc_t. . . . . . . . .  TYPEDEF  -----  STRUCT   -----  2
  bLength. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  bDescriptorType. . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
ivec . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7A8H  1
g_hal_usb. . . . . . . . . . . . . . .  PUBLIC   XDATA  STRUCT   0023H  29
in8data. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C768H  1
in8addr. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7F8H  1
_hal_usb_endpoint_stall. . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ep_num . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  stall. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  temp . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
  cs_ptr . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  2
out8data . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C760H  1
SUSPENDED. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
out8addr . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7F0H  1
usb_conf_desc_templ_t. . . . . . . . .  TYPEDEF  -----  STRUCT   -----  32
  conf . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  9
  if0. . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0009H  9
  ep1in. . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0012H  7
  ep1out . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0019H  7
hal_usb_string_desc_t. . . . . . . . .  TYPEDEF  -----  STRUCT   -----  3
  desc . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  3
TCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0088H  1
g_usb_dev_desc . . . . . . . . . . . .  EXTERN   CODE   STRUCT   -----  18
isr_suspend. . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  allow_remote_wu. . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
hal_usb_t. . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  29
  descs. . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  13
  bm_state . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000DH  1
  current_config . . . . . . . . . . .  MEMBER   -----  U_CHAR   000EH  1
  current_alt_interface. . . . . . . .  MEMBER   -----  U_CHAR   000FH  1
  state. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0010H  1
  device_req . . . . . . . . . . . . .  MEMBER   -----  PTR      0011H  3
  reset. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0014H  3
  resume . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0017H  3
  suspend. . . . . . . . . . . . . . .  MEMBER   -----  PTR      001AH  3
_usb_process_ep_response . . . . . . .  STATIC   CODE   PROC     0000H  -----
  ret. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0001H  1
  cs_ptr . . . . . . . . . . . . . . .  * REG *  DATA   PTR      0004H  2
  bc_ptr . . . . . . . . . . . . . . .  * REG *  DATA   PTR      0082H  2
hal_usb_state_t. . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
binstaddr. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C788H  1
out8bch. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C770H  1
ATTACHED . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
hal_usb_conf_desc_t. . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  9
  bLength. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  bDescriptorType. . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  wTotalLength . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  bNumInterfaces . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 84  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  bConfigurationValue. . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  iConfiguration . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  bmAttributes . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  bMaxPower. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
out8bcl. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C771H  1
hal_usb_cb_suspend_t . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
_packetize . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  data_ptr . . . . . . . . . . . . . .  * REG *  DATA   PTR      0001H  3
  data_size. . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
in0buf . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    C700H  32
_?ep_1_out_cb. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
in1buf . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    C680H  32
usb_wu_isr . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  t. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
req. . . . . . . . . . . . . . . . . .  STATIC   XDATA  STRUCT   0040H  6
out0buf. . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    C6C0H  32
in2buf . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    C600H  32
out1buf. . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    C640H  32
in3buf . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    C580H  32
out2buf. . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    C5C0H  32
in4buf . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    C500H  32
out3buf. . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    C540H  32
in5buf . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    C480H  32
USBCON . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
out4buf. . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    C4C0H  32
inbulkval. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7DEH  1
in0bc. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7B5H  1
out5buf. . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    C440H  32
in1bc. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7B7H  1
ACK. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
uint8_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
outbulkval . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7DFH  1
out0bc . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7C5H  1
in2bc. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7B9H  1
hal_usb_get_address. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
hal_usb_hid_desc_t . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  9
  bLength. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  bDescriptorType. . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  bcdHID . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  bCountryCode . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  bNumDescriptors. . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  bDescriptorType2 . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  wDescriptorLength. . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
out1bc . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7C7H  1
in3bc. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7BBH  1
out2bc . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7C9H  1
in4bc. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7BDH  1
isostaddr. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7E2H  1
out3bc . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7CBH  1
in5bc. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7BFH  1
_delay_ms. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
hal_usb_cb_resume_t. . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
out4bc . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7CDH  1
hal_usb_wakeup . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
out5bc . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7CFH  1
isr_sudav. . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
int8_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 85  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


NAK. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
hal_usb_dev_desc_t . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  18
  bLength. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  bDescriptorType. . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  bcdUSB . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  bDeviceClass . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  bDeviceSubClass. . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  bDeviceProtocol. . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  bMaxPacketSize0. . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  idVendor . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  idProduct. . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  bcdDevice. . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  iManufacturer. . . . . . . . . . . .  MEMBER   -----  U_CHAR   000EH  1
  iProduct . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000FH  1
  iSerialNumber. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0010H  1
  bNumConfigurations . . . . . . . . .  MEMBER   -----  U_CHAR   0011H  1
usb_process_get_status . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  ptr. . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  2
USBSLP . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D9H  1
hal_usb_cb_device_req_t. . . . . . . .  TYPEDEF  -----  PTR      -----  3
ep0cs. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7B4H  1
hal_usb_bus_connect. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
hal_usb_sleep. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
in1cs. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7B6H  1
in2cs. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7B8H  1
hal_usb_device_req . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  6
  bmRequestType. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  bRequest . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  wValueMsb. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  wValueLsb. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  wIndex . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  wLength. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
out1cs . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7C6H  1
in3cs. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7BAH  1
out2cs . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7C8H  1
in4cs. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7BCH  1
out3cs . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7CAH  1
in5cs. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7BEH  1
hal_usb_cb_reset_t . . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
EMPTY_RESPONSE . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
S0CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
out4cs . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7CCH  1
out5cs . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7CEH  1
T2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
hal_usb_reset. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
hal_usb_if_desc_t. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  9
  bLength. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  bDescriptorType. . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  bInterfaceNumber . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  bAlternateSetting. . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  bNumEndpoints. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  bInterfaceClass. . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  bInterfaceSubClass . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  bInterfaceProtocol . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  iInterface . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
inisoval . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7E0H  1
CONFIGURED . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 86  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


USB. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BCH  1
FSR. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F8H  1
outisoval. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7E1H  1
_hal_usb_send_data . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ep_num . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  array. . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0001H  3
  count. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0004H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0005H  1
  buf_ptr. . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0006H  2
  bc_ptr . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0008H  2
_Bool. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
stall_data_size0 . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0046H  1
hal_usb_ep_desc_t. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  7
  bLength. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  bDescriptorType. . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  bEndpointAddress . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  bmAttributes . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  wMaxPacketSize . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  bInterval. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
NO_RESPONSE. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
AESCS. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
fnaddr . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7DBH  1
setupbuf . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    C7E8H  8
in_ien . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7ACH  1
usb_process_dev_req_cb_response. . . .  STATIC   CODE   PROC     0000H  -----
  data_ptr . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  data_size. . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
  ret. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
out_ien. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7ADH  1
usb_process_get_descriptor . . . . . .  STATIC   CODE   PROC     0000H  -----
_hal_usb_init. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  usb_disconnect . . . . . . . . . . .  AUTO     DATA   U_CHAR   0007H  1
  device_req . . . . . . . . . . . . .  AUTO     XDATA  PTR      0001H  3
  reset. . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0004H  3
  resume . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0007H  3
  suspend. . . . . . . . . . . . . . .  AUTO     XDATA  PTR      000AH  3
RFCON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
usbpair. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7DDH  1
PSW. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D0H  1
usb_isr. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ep . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  ret. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  cs_ptr . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0001H  2
  buf_ptr. . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0003H  2
  bc_ptr . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0005H  2
usbfrmh. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   C7D9H  1
uint32_t . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
WDCON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D8H  1
IRCON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C0H  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2709    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     71      42
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.03   HAL_USB                                                               06/20/2011 20:16:56 PAGE 87  

   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
